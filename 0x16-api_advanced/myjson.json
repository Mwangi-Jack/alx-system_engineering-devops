{
	"kind": "Listing",
	"data": {
	  "after": "t3_1cftm37",
	  "dist": 52,
	  "modhash": "",
	  "geo_filter": null,
	  "children": [
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! üåü",
			"author_fullname": "t2_6l4z3",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Sunday Daily Thread: What's everyone working on this week?",
			"link_flair_richtext": [
			  {
				"a": ":pythonLogo:",
				"e": "emoji",
				"u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
			  },
			  {
				"e": "text",
				"t": " Daily Thread"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "daily-thread",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cke7cp",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.65,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 5,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": ":pythonLogo: Daily Thread",
			"can_mod_post": false,
			"score": 5,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": true,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714867210,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: What&amp;#39;s Everyone Working On This Week? üõ†Ô∏è&lt;/h1&gt;\n\n&lt;p&gt;Hello &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! It&amp;#39;s time to share what you&amp;#39;ve been working on! Whether it&amp;#39;s a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you&amp;#39;re up to!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Show &amp;amp; Tell&lt;/strong&gt;: Share your current projects, completed works, or future ideas.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Discuss&lt;/strong&gt;: Get feedback, find collaborators, or just chat about your project.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inspire&lt;/strong&gt;: Your project might inspire someone else, just as you might get inspired here.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Feel free to include as many details as you&amp;#39;d like. Code snippets, screenshots, and links are all welcome.&lt;/li&gt;\n&lt;li&gt;Whether it&amp;#39;s your job, your hobby, or your passion project, all Python-related work is welcome here.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Machine Learning Model&lt;/strong&gt;: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Web Scraping&lt;/strong&gt;: Built a script to scrape and analyze news articles. It&amp;#39;s helped me understand media bias better.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s build and grow together! Share your journey and learn from others. Happy coding! üåü&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": "moderator",
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#00a6a5",
			"id": "1cke7cp",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "AutoModerator",
			"discussion_type": null,
			"num_comments": 15,
			"send_replies": false,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cke7cp/sunday_daily_thread_whats_everyone_working_on/",
			"parent_whitelist_status": "all_ads",
			"stickied": true,
			"url": "https://www.reddit.com/r/Python/comments/1cke7cp/sunday_daily_thread_whats_everyone_working_on/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714867210,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "# Weekly Wednesday Thread: Advanced Questions üêç\n\nDive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.\n\n## How it Works:\n\n1. **Ask Away**: Post your advanced Python questions here.\n2. **Expert Insights**: Get answers from experienced developers.\n3. **Resource Pool**: Share or discover tutorials, articles, and tips.\n\n## Guidelines:\n\n* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.\n* Questions that are not advanced may be removed and redirected to the appropriate thread.\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **How can you implement a custom memory allocator in Python?**\n2. **What are the best practices for optimizing Cython code for heavy numerical computations?**\n3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**\n4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**\n5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**\n6. **What are some advanced use-cases for Python's decorators?**\n7. **How can you achieve real-time data streaming in Python with WebSockets?**\n8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**\n9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**\n10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**\n\nLet's deepen our Python knowledge together. Happy coding! üåü",
			"author_fullname": "t2_6l4z3",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Tuesday Daily Thread: Advanced questions",
			"link_flair_richtext": [
			  {
				"a": ":pythonLogo:",
				"e": "emoji",
				"u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
			  },
			  {
				"e": "text",
				"t": " Daily Thread"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "daily-thread",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cly3uc",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.67,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 1,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": ":pythonLogo: Daily Thread",
			"can_mod_post": false,
			"score": 1,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": true,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1715040007,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Wednesday Thread: Advanced Questions üêç&lt;/h1&gt;\n\n&lt;p&gt;Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Away&lt;/strong&gt;: Post your advanced Python questions here.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Expert Insights&lt;/strong&gt;: Get answers from experienced developers.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Pool&lt;/strong&gt;: Share or discover tutorials, articles, and tips.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is for &lt;strong&gt;advanced questions only&lt;/strong&gt;. Beginner questions are welcome in our &lt;a href=\"#daily-beginner-thread-link\"&gt;Daily Beginner Thread&lt;/a&gt; every Thursday.&lt;/li&gt;\n&lt;li&gt;Questions that are not advanced may be removed and redirected to the appropriate thread.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;How can you implement a custom memory allocator in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for optimizing Cython code for heavy numerical computations?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do you set up a multi-threaded architecture using Python&amp;#39;s Global Interpreter Lock (GIL)?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How would you go about implementing a distributed task queue using Celery and RabbitMQ?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are some advanced use-cases for Python&amp;#39;s decorators?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How can you achieve real-time data streaming in Python with WebSockets?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Best practices for securing a Flask (or similar) REST API with OAuth 2.0?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s deepen our Python knowledge together. Happy coding! üåü&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76",
					"width": 512,
					"height": 288
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413",
					  "width": 108,
					  "height": 60
					},
					{
					  "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf",
					  "width": 216,
					  "height": 121
					},
					{
					  "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16",
					  "width": 320,
					  "height": 180
					}
				  ],
				  "variants": {

				  },
				  "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": "moderator",
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#00a6a5",
			"id": "1cly3uc",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "AutoModerator",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": false,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cly3uc/tuesday_daily_thread_advanced_questions/",
			"parent_whitelist_status": "all_ads",
			"stickied": true,
			"url": "https://www.reddit.com/r/Python/comments/1cly3uc/tuesday_daily_thread_advanced_questions/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1715040007,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\n\n* https://pip.pypa.io/en/latest/news/#b1-2024-05-06\n* https://pypi.org/project/pip/24.1b1/\n\nYou can install with:\n\n\tpython -m pip install pip==24.1b1\n\nIn particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a [big effort](https://github.com/pypa/pip/pull/12300) and [fixed](https://github.com/pypa/pip/issues/7650) [many](https://github.com/pypa/pip/issues/9613) [bugs](https://github.com/pypa/pip/issues/10098), included significant performance improvements, and will allow pip to support [free threaded packages](https://github.com/pypa/packaging/pull/728). However, it also means legacy versions and specifiers are [no longer compatible](https://github.com/pypa/pip/issues/12063) with pip.\n\nBecause this was such a big land the pip maintainers have released a beta in the hopes people will test their workflows, and if something fails in an expected way report their steps as best as possible back to pip: https://github.com/pypa/pip/issues\n\nI've been testing, and contributing a little bit, to the improved performance in this release, it is most noticeable on large dependency trees or long backtracking. For example, a dry run of \"apache-airflow[all]\" using cached packages on my machine goes from ~418 seconds to ~185 seconds.",
			"author_fullname": "t2_ajq6m",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Pip 24.1 beta released, and it's a big one",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "News"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "news",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1clx454",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.96,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 115,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "News",
			"can_mod_post": false,
			"score": 115,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1715037256,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://pip.pypa.io/en/latest/news/#b1-2024-05-06\"&gt;https://pip.pypa.io/en/latest/news/#b1-2024-05-06&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://pypi.org/project/pip/24.1b1/\"&gt;https://pypi.org/project/pip/24.1b1/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You can install with:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;python -m pip install pip==24.1b1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a &lt;a href=\"https://github.com/pypa/pip/pull/12300\"&gt;big effort&lt;/a&gt; and &lt;a href=\"https://github.com/pypa/pip/issues/7650\"&gt;fixed&lt;/a&gt; &lt;a href=\"https://github.com/pypa/pip/issues/9613\"&gt;many&lt;/a&gt; &lt;a href=\"https://github.com/pypa/pip/issues/10098\"&gt;bugs&lt;/a&gt;, included significant performance improvements, and will allow pip to support &lt;a href=\"https://github.com/pypa/packaging/pull/728\"&gt;free threaded packages&lt;/a&gt;. However, it also means legacy versions and specifiers are &lt;a href=\"https://github.com/pypa/pip/issues/12063\"&gt;no longer compatible&lt;/a&gt; with pip.&lt;/p&gt;\n\n&lt;p&gt;Because this was such a big land the pip maintainers have released a beta in the hopes people will test their workflows, and if something fails in an expected way report their steps as best as possible back to pip: &lt;a href=\"https://github.com/pypa/pip/issues\"&gt;https://github.com/pypa/pip/issues&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been testing, and contributing a little bit, to the improved performance in this release, it is most noticeable on large dependency trees or long backtracking. For example, a dry run of &amp;quot;apache-airflow[all]&amp;quot; using cached packages on my machine goes from ~418 seconds to ~185 seconds.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#7193ff",
			"id": "1clx454",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "zurtex",
			"discussion_type": null,
			"num_comments": 15,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1clx454/pip_241_beta_released_and_its_a_big_one/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1clx454/pip_241_beta_released_and_its_a_big_one/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1715037256,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!)\n\n**What My Project Does:**\n\nUsing the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order.\n\n**Target Audience:**\n\nAnyone who struggles like me when they find a new Artist and they want to listen to every conceivable song from them!\n\nLink to GitHub: [https://github.com/RJW20/spotify-artist-to-playlist](https://github.com/RJW20/spotify-artist-to-playlist)",
			"author_fullname": "t2_z9mfhg4ln",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Python script to convert Spotify Artists to Playlists",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": true,
			"name": "t3_1cm8s6f",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 1,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 6,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 6,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1715078297,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve made my first bit of useful software and I wanted to share it here. I&amp;#39;d love some feedback (and it would be amazing to hear if someone has used it!)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that&amp;#39;s done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Anyone who struggles like me when they find a new Artist and they want to listen to every conceivable song from them!&lt;/p&gt;\n\n&lt;p&gt;Link to GitHub: &lt;a href=\"https://github.com/RJW20/spotify-artist-to-playlist\"&gt;https://github.com/RJW20/spotify-artist-to-playlist&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/8VJs9BB7Tq0u835gk0weDk-swSAteENyhmQKupLI_nY.jpg?auto=webp&amp;s=e4c9e7776205886fc0c0da7b62f2a1219dc6e924",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/8VJs9BB7Tq0u835gk0weDk-swSAteENyhmQKupLI_nY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=5d322d799fdbeda3ca4e99197f530288f1d04f0b",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/8VJs9BB7Tq0u835gk0weDk-swSAteENyhmQKupLI_nY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=85b653c6d0ec2014c7fb06c1796b92a70f41065f",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/8VJs9BB7Tq0u835gk0weDk-swSAteENyhmQKupLI_nY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=0ed187e516d38ae288c80ef26208b2cd534225e7",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/8VJs9BB7Tq0u835gk0weDk-swSAteENyhmQKupLI_nY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=dfc9cff63228601d35f64050a849fe40352d60b4",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/8VJs9BB7Tq0u835gk0weDk-swSAteENyhmQKupLI_nY.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7e6e6f6e8cf77cd018db2a6ac79f91c6e507c53c",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/8VJs9BB7Tq0u835gk0weDk-swSAteENyhmQKupLI_nY.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=42dad0e62960df5635b1b286cc046dfa0066323f",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "g6kZFPQs5ysG25VpU9JEtfOH7jYeOV6XHCsuNWZzPq4"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1cm8s6f",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "RJW-20",
			"discussion_type": null,
			"num_comments": 1,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cm8s6f/python_script_to_convert_spotify_artists_to/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cm8s6f/python_script_to_convert_spotify_artists_to/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1715078297,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the \\_\\_await\\_\\_ dunder method to use the async/await keywords to come full circle!\n\n\n\n[https://jacobpadilla.com/articles/recreating-asyncio](https://jacobpadilla.com/articles/recreating-asyncio)",
			"author_fullname": "t2_tgft86qt",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "How Python Asyncio Works: Recreating it from Scratch",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Tutorial"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "tutorial",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1clz4dy",
			"quarantine": false,
			"link_flair_text_color": "dark",
			"upvote_ratio": 0.85,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 24,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Tutorial",
			"can_mod_post": false,
			"score": 24,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1715042952,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://jacobpadilla.com/articles/recreating-asyncio\"&gt;https://jacobpadilla.com/articles/recreating-asyncio&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/TuuRx4lQqE6Uz4w9LS6vvW8mUhgr0jZwokhT_Q5bNlc.jpg?auto=webp&amp;s=7fbd146777b1abc333a7eac27def7a7ec1884e69",
					"width": 1200,
					"height": 630
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/TuuRx4lQqE6Uz4w9LS6vvW8mUhgr0jZwokhT_Q5bNlc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=5eb9ab312ab92cce62b837fba05e7c086149d79b",
					  "width": 108,
					  "height": 56
					},
					{
					  "url": "https://external-preview.redd.it/TuuRx4lQqE6Uz4w9LS6vvW8mUhgr0jZwokhT_Q5bNlc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=68ff9532a54163b2280a48529447a493ceaa74eb",
					  "width": 216,
					  "height": 113
					},
					{
					  "url": "https://external-preview.redd.it/TuuRx4lQqE6Uz4w9LS6vvW8mUhgr0jZwokhT_Q5bNlc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=d8c6d91c50d0f83db0164bc963036987aaa50770",
					  "width": 320,
					  "height": 168
					},
					{
					  "url": "https://external-preview.redd.it/TuuRx4lQqE6Uz4w9LS6vvW8mUhgr0jZwokhT_Q5bNlc.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=229a9dde3d3fd4686ebcf66cab7e9184a5abc455",
					  "width": 640,
					  "height": 336
					},
					{
					  "url": "https://external-preview.redd.it/TuuRx4lQqE6Uz4w9LS6vvW8mUhgr0jZwokhT_Q5bNlc.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=db753bb83926fc9fbe91771b829e3d3cdae2b11b",
					  "width": 960,
					  "height": 504
					},
					{
					  "url": "https://external-preview.redd.it/TuuRx4lQqE6Uz4w9LS6vvW8mUhgr0jZwokhT_Q5bNlc.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=dcf86ab274c57d12a824fbb447f0b4d0bdacc98b",
					  "width": 1080,
					  "height": 567
					}
				  ],
				  "variants": {

				  },
				  "id": "DjfwqWSPViA6yky1A6CqgR1jIrkqBuz7BhSumsxUdgk"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#dadada",
			"id": "1clz4dy",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "jpjacobpadilla",
			"discussion_type": null,
			"num_comments": 2,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1clz4dy/how_python_asyncio_works_recreating_it_from/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1clz4dy/how_python_asyncio_works_recreating_it_from/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1715042952,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Excited to finally showcase this!\n\nIt's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this.\n\nCode: [github.com/crpier/relax-py](http://github.com/crpier/relax-py)\n\nDocumentation: [crpier.github.io/relax-py](http://crpier.github.io/relax-py)\n\n **What My Project Does**\n\n`relax-py` is a Python framework for building full-stack applications with `htmx`\n\nIt provides tools for writing HTML in a manner similar to [simple\\_html](https://github.com/keithasaurus/simple_html) (which also inspired the decision to use standard Python to write HTML, rather than use `Jinja2` or to make something like [templ](https://github.com/a-h/templ) work in Python)\n\nIt has:\n\n* Hot Module Replacement (meaning, when you update the code that generates HTML templates, the browser also updates instantly) - see the video in the documentation for a quick demo of this\n* URL resolution with type hinting - you can get the URL of an endpoint to use in your templates by using the function that handles that URL, and get help from static typing (for example, for putting path parameters in the URL)\n* Helpers for dependency injection\n\nIn essence, this framework is just a bunch of decorators and functions over [starlette](https://www.starlette.io/), meaning everything that starlette has can be used alongside the framework.\n\n**Target Audience**\n\nDevelopers interested in building web applications with `htmx` that like new shiny things and static typing support\n\n**Comparison**\n\nAs far as I know, the only other backend framework that has Hot Module Replacement is [turbo](https://www.hotrails.dev/) in Ruby on Rails, but there might be something I missed.\n\nAs for other points of comparison with other frameworks:\n\n* Django\n   * `relax` is less opinionated about what's done in the backend (.e.g there is preference to what ORM is used)\n   * using standard Python code to generate HTML has nicer static typing\n   * the URL resolution is more complex and provides errors in the IDE by way of static typing\n   * the `component` decorator provides nicer ways to reuse template functions and helpers for interoperability with JavaScript\n* [templ](https://github.com/a-h/templ) in Go\n   * templ allows writing actual HTML in go files, but requires an additional compilation step\n   * plugins for whatever IDE/code editor is used are needed parsing templ files\n* FastAPI (with something to generate HTML like simple\\_html or Jinja2)\n   * since FastAPI is built for RESTful APIs, it lacks niceties like URL resolution, or a mechanism to manage the sprawling mess of interconnected HTML components that apps tend to develop\n   * dependency injection in FastAPI is \"encouraged\" to happen in the path functions, but in `relax` it's meant to happen at any level of the app (either in path functions, or in service-level functions, or in util functions)\n* simple\\_html (with a backend like Flask or FastAPI): the main differences between simple\\_html and the `relax.html` module are that\n   * CSS classes are provided as a list of strings - this makes it easier to reuse them in different components, and will make it easier to implement other helpers in the future, like a Python version of [tailwind-merge](https://github.com/dcastil/tailwind-merge), or a formatter that sorts tailwind classes\n   * htmx-related attributes are included in the elements\n   * inserting children to an HTML element is done after instantiating the element, making it easier to reuse components\n\nHere's the code again: [github.com/crpier/relax-py](http://github.com/crpier/relax-py)\n\nThere's more details in the documentation: [crpier.github.io/relax-py](http://crpier.github.io/relax-py)\n\nWhile this framework is definitely not production ready, in the \"Other\" page of the documentation there's an example app built with this framework, which shows how it can be used in conjuction with some real-life scenarios (production environment for tailwind with plugins, working in a bunch of interactivity with JavaScript, in either separate js files and inline scripts, Dockerfiles and deployments, authentication and authorization, configuration etc.)\n\nPlease let me know what you think (are there better alternatives, is writing HTML in standard Python a deal-breaker, is investing in making something templ in Python worth it?)\n\nHope you're intrigued by this!",
			"author_fullname": "t2_p0ox6s42",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "relax-py - Web framework for htmx with hot module replacement",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1clrnce",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.82,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 33,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 33,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1715023443,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Excited to finally showcase this!&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s still pretty rough around the edges, but I&amp;#39;m finally happy enough with the feature set and curious to see what the community thinks about a framework like this.&lt;/p&gt;\n\n&lt;p&gt;Code: &lt;a href=\"http://github.com/crpier/relax-py\"&gt;github.com/crpier/relax-py&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Documentation: &lt;a href=\"http://crpier.github.io/relax-py\"&gt;crpier.github.io/relax-py&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;relax-py&lt;/code&gt; is a Python framework for building full-stack applications with &lt;code&gt;htmx&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;It provides tools for writing HTML in a manner similar to &lt;a href=\"https://github.com/keithasaurus/simple_html\"&gt;simple_html&lt;/a&gt; (which also inspired the decision to use standard Python to write HTML, rather than use &lt;code&gt;Jinja2&lt;/code&gt; or to make something like &lt;a href=\"https://github.com/a-h/templ\"&gt;templ&lt;/a&gt; work in Python)&lt;/p&gt;\n\n&lt;p&gt;It has:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Hot Module Replacement (meaning, when you update the code that generates HTML templates, the browser also updates instantly) - see the video in the documentation for a quick demo of this&lt;/li&gt;\n&lt;li&gt;URL resolution with type hinting - you can get the URL of an endpoint to use in your templates by using the function that handles that URL, and get help from static typing (for example, for putting path parameters in the URL)&lt;/li&gt;\n&lt;li&gt;Helpers for dependency injection&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In essence, this framework is just a bunch of decorators and functions over &lt;a href=\"https://www.starlette.io/\"&gt;starlette&lt;/a&gt;, meaning everything that starlette has can be used alongside the framework.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Developers interested in building web applications with &lt;code&gt;htmx&lt;/code&gt; that like new shiny things and static typing support&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As far as I know, the only other backend framework that has Hot Module Replacement is &lt;a href=\"https://www.hotrails.dev/\"&gt;turbo&lt;/a&gt; in Ruby on Rails, but there might be something I missed.&lt;/p&gt;\n\n&lt;p&gt;As for other points of comparison with other frameworks:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Django\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;relax&lt;/code&gt; is less opinionated about what&amp;#39;s done in the backend (.e.g there is preference to what ORM is used)&lt;/li&gt;\n&lt;li&gt;using standard Python code to generate HTML has nicer static typing&lt;/li&gt;\n&lt;li&gt;the URL resolution is more complex and provides errors in the IDE by way of static typing&lt;/li&gt;\n&lt;li&gt;the &lt;code&gt;component&lt;/code&gt; decorator provides nicer ways to reuse template functions and helpers for interoperability with JavaScript&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/a-h/templ\"&gt;templ&lt;/a&gt; in Go\n\n&lt;ul&gt;\n&lt;li&gt;templ allows writing actual HTML in go files, but requires an additional compilation step&lt;/li&gt;\n&lt;li&gt;plugins for whatever IDE/code editor is used are needed parsing templ files&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;FastAPI (with something to generate HTML like simple_html or Jinja2)\n\n&lt;ul&gt;\n&lt;li&gt;since FastAPI is built for RESTful APIs, it lacks niceties like URL resolution, or a mechanism to manage the sprawling mess of interconnected HTML components that apps tend to develop&lt;/li&gt;\n&lt;li&gt;dependency injection in FastAPI is &amp;quot;encouraged&amp;quot; to happen in the path functions, but in &lt;code&gt;relax&lt;/code&gt; it&amp;#39;s meant to happen at any level of the app (either in path functions, or in service-level functions, or in util functions)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;simple_html (with a backend like Flask or FastAPI): the main differences between simple_html and the &lt;code&gt;relax.html&lt;/code&gt; module are that\n\n&lt;ul&gt;\n&lt;li&gt;CSS classes are provided as a list of strings - this makes it easier to reuse them in different components, and will make it easier to implement other helpers in the future, like a Python version of &lt;a href=\"https://github.com/dcastil/tailwind-merge\"&gt;tailwind-merge&lt;/a&gt;, or a formatter that sorts tailwind classes&lt;/li&gt;\n&lt;li&gt;htmx-related attributes are included in the elements&lt;/li&gt;\n&lt;li&gt;inserting children to an HTML element is done after instantiating the element, making it easier to reuse components&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Here&amp;#39;s the code again: &lt;a href=\"http://github.com/crpier/relax-py\"&gt;github.com/crpier/relax-py&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s more details in the documentation: &lt;a href=\"http://crpier.github.io/relax-py\"&gt;crpier.github.io/relax-py&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;While this framework is definitely not production ready, in the &amp;quot;Other&amp;quot; page of the documentation there&amp;#39;s an example app built with this framework, which shows how it can be used in conjuction with some real-life scenarios (production environment for tailwind with plugins, working in a bunch of interactivity with JavaScript, in either separate js files and inline scripts, Dockerfiles and deployments, authentication and authorization, configuration etc.)&lt;/p&gt;\n\n&lt;p&gt;Please let me know what you think (are there better alternatives, is writing HTML in standard Python a deal-breaker, is investing in making something templ in Python worth it?)&lt;/p&gt;\n\n&lt;p&gt;Hope you&amp;#39;re intrigued by this!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/wzPghRKOfh-PRVBGttQYMDhSR-Ky7H27T9lw9cr2VhM.jpg?auto=webp&amp;s=23d70bd6a87df261be070418f45c3ec04d13fc9f",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/wzPghRKOfh-PRVBGttQYMDhSR-Ky7H27T9lw9cr2VhM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a7dcaa21fe93f0bd70a0739442303cc0332b9d70",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/wzPghRKOfh-PRVBGttQYMDhSR-Ky7H27T9lw9cr2VhM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=17544ada61d381871e75c778a105640d05a7ec1f",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/wzPghRKOfh-PRVBGttQYMDhSR-Ky7H27T9lw9cr2VhM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ea9f6445df7cd9da9be5915e064188a6eb87d071",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/wzPghRKOfh-PRVBGttQYMDhSR-Ky7H27T9lw9cr2VhM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=dec6d4c12da40267ed0a9e52755ed7c21e88b0aa",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/wzPghRKOfh-PRVBGttQYMDhSR-Ky7H27T9lw9cr2VhM.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=85347dad9916501448347fa99cfbc1473a5ebe0e",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/wzPghRKOfh-PRVBGttQYMDhSR-Ky7H27T9lw9cr2VhM.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=71ad6a22ae7cefec1e97b82f3e31fbcad7ed0c0f",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "scBvPUAtlhfaVj7I2tVA9Rztz5Smx-xMva5chr-St3Y"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1clrnce",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "MindLopsided4430",
			"discussion_type": null,
			"num_comments": 12,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1clrnce/relaxpy_web_framework_for_htmx_with_hot_module/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1clrnce/relaxpy_web_framework_for_htmx_with_hot_module/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1715023443,
			"num_crossposts": 1,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance.  See the [release announcement](https://github.com/oracle/python-oracledb/issues/332).",
			"author_fullname": "t2_hzzn0",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "News"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "news",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cm3j4q",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.5,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 0,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "News",
			"can_mod_post": false,
			"score": 0,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1715056679,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance.  See the &lt;a href=\"https://github.com/oracle/python-oracledb/issues/332\"&gt;release announcement&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/0gOSfZmJJQgFcKtieniwOZxwGW9OnXjR6eLMjLjCDYw.jpg?auto=webp&amp;s=4ce2bb5860384b0eb492ea4e547ebfbb25ffaabc",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/0gOSfZmJJQgFcKtieniwOZxwGW9OnXjR6eLMjLjCDYw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e681856a92cb05add234cf08bc81aaa8e07acd8d",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/0gOSfZmJJQgFcKtieniwOZxwGW9OnXjR6eLMjLjCDYw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6ba34db2a0e1d14b0e9a61bc2795c8d8fc0265d6",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/0gOSfZmJJQgFcKtieniwOZxwGW9OnXjR6eLMjLjCDYw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b0bd9d96b2276720b8e167c2dc0c495269a80494",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/0gOSfZmJJQgFcKtieniwOZxwGW9OnXjR6eLMjLjCDYw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=e07c3d50226de1905586419c0cf3a8e33d50c99c",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/0gOSfZmJJQgFcKtieniwOZxwGW9OnXjR6eLMjLjCDYw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=4fb1b6a165912bfd5ba0765968f52d50c443056b",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/0gOSfZmJJQgFcKtieniwOZxwGW9OnXjR6eLMjLjCDYw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=b2c963f366f66cd680562ff68099a7e633aa3810",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "VS0ef2-4qDEebeVaC7djft0ctGkzWbHgSh7VhBKbFCc"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#7193ff",
			"id": "1cm3j4q",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "cjbj",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cm3j4q/pythonoracledb_22_and_the_vector_type_in_oracle/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cm3j4q/pythonoracledb_22_and_the_vector_type_in_oracle/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1715056679,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "See https://github.com/BenHanson/pylexertl\n\nI will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already.\n\nMy python experience has been limited up until now, but it is big for my new role.\n\nI have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for.\n\nI hope this is of interest to somebody!\n\n**What My Project Does**\n\nAllows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)\n\n**Target Audience**\n\nThe C++ library has been used in production for over 10 years.\n\n**Comparison**\n\nI'm not aware of any competing library.",
			"author_fullname": "t2_3o9w0",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "I've started writing Python bindings for lexertl",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1clpq5l",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.67,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 4,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 4,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1715018731,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;See &lt;a href=\"https://github.com/BenHanson/pylexertl\"&gt;https://github.com/BenHanson/pylexertl&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already.&lt;/p&gt;\n\n&lt;p&gt;My python experience has been limited up until now, but it is big for my new role.&lt;/p&gt;\n\n&lt;p&gt;I have a runtime parser generator &lt;a href=\"https://github.com/BenHanson/parsertl17\"&gt;https://github.com/BenHanson/parsertl17&lt;/a&gt; which I also plan to add bindings for.&lt;/p&gt;\n\n&lt;p&gt;I hope this is of interest to somebody!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The C++ library has been used in production for over 10 years.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not aware of any competing library.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/z3sbFt6c0uPmYD9mIX4RvfCGrKRV0EPP7x1X0iPQCSQ.jpg?auto=webp&amp;s=e07e3e53e15f121743563ae940d332ccb7197714",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/z3sbFt6c0uPmYD9mIX4RvfCGrKRV0EPP7x1X0iPQCSQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=db965dac76b838daac808c56e407c694a1336dff",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/z3sbFt6c0uPmYD9mIX4RvfCGrKRV0EPP7x1X0iPQCSQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=3670ca4e16812b3ed92f995cf4d9eda8b9fd3c80",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/z3sbFt6c0uPmYD9mIX4RvfCGrKRV0EPP7x1X0iPQCSQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ce8c485b5ff009106625827e7c7f7eb614b174f5",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/z3sbFt6c0uPmYD9mIX4RvfCGrKRV0EPP7x1X0iPQCSQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3403136f1af2b8f7cccee79102e0b903a5e26f70",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/z3sbFt6c0uPmYD9mIX4RvfCGrKRV0EPP7x1X0iPQCSQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1532c25afeb4ef85d26cb7e712743c2484ba8822",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/z3sbFt6c0uPmYD9mIX4RvfCGrKRV0EPP7x1X0iPQCSQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=1bce8aa1ae734ca596f27d1f48cbdb41b854f112",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "eNLiIvKaZTVSTr5HYsRcSeYhZXna-CHW088_Nuh-5W4"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1clpq5l",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "BenHanson",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1clpq5l/ive_started_writing_python_bindings_for_lexertl/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1clpq5l/ive_started_writing_python_bindings_for_lexertl/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1715018731,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "**What My Project Does**\n\nPgQueuer is a Python library designed to manage job queues using  PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system.\n\n**Target Audience**\n\nPgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases.\n\n**Comparison**\n\nUnlike many other job queue solutions that require additional services or complex setups (such as Redis or RabbitMQ), PgQueuer operates directly within PostgreSQL. This removes the overhead of integrating and maintaining separate systems for job management.\n\n**How PgQueuer stands out**\n\n* **Integration Simplicity**: Integrates directly with existing PostgreSQL setups without additional infrastructure.\n* **Efficiency**: Uses PostgreSQL‚Äôs `FOR UPDATE SKIP LOCKED` for high concurrency, allowing multiple workers to process tasks simultaneously without conflict.\n* **Real-time Updates**: Utilizes PostgreSQL's LISTEN/NOTIFY for immediate job processing updates, reducing latency compared to polling-based systems.\n\n**Request for Feedback on Useful Features**\n\nIm always looking to improve PgQueuer and make it more useful for our users. If you have any features you'd like to see, or if there's something you think could be improved, please let me know! Your feedback is invaluable! Share your thoughts, suggestions, or feature requests either here in the comments or via [GitHub](https://github.com/janbjorge/PgQueuer).",
			"author_fullname": "t2_ch1yi",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ckrmog",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.95,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 119,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 119,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714916767,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;PgQueuer is a Python library designed to manage job queues using  PostgreSQL features. It leverages PostgreSQL&amp;#39;s native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It&amp;#39;s designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Unlike many other job queue solutions that require additional services or complex setups (such as Redis or RabbitMQ), PgQueuer operates directly within PostgreSQL. This removes the overhead of integrating and maintaining separate systems for job management.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How PgQueuer stands out&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Integration Simplicity&lt;/strong&gt;: Integrates directly with existing PostgreSQL setups without additional infrastructure.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;: Uses PostgreSQL‚Äôs &lt;code&gt;FOR UPDATE SKIP LOCKED&lt;/code&gt; for high concurrency, allowing multiple workers to process tasks simultaneously without conflict.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Real-time Updates&lt;/strong&gt;: Utilizes PostgreSQL&amp;#39;s LISTEN/NOTIFY for immediate job processing updates, reducing latency compared to polling-based systems.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Request for Feedback on Useful Features&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Im always looking to improve PgQueuer and make it more useful for our users. If you have any features you&amp;#39;d like to see, or if there&amp;#39;s something you think could be improved, please let me know! Your feedback is invaluable! Share your thoughts, suggestions, or feature requests either here in the comments or via &lt;a href=\"https://github.com/janbjorge/PgQueuer\"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/Bt32SLkPkpW86kANs3NShLVP828lSDQNN1135wXbGGw.jpg?auto=webp&amp;s=843ade55ccc6f999d14cd04129449a1a8b647b9c",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/Bt32SLkPkpW86kANs3NShLVP828lSDQNN1135wXbGGw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=3330b50436c0de1f46e5521734d5e5bdd21b7833",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/Bt32SLkPkpW86kANs3NShLVP828lSDQNN1135wXbGGw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=8bb8789ca2ad457c3d99d54794f422a4793894ba",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/Bt32SLkPkpW86kANs3NShLVP828lSDQNN1135wXbGGw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6c98ba544b00f3f67b63c279b60ac4c760207ce9",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/Bt32SLkPkpW86kANs3NShLVP828lSDQNN1135wXbGGw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6150658860cf35b4e34e168642fbbc17a593b364",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/Bt32SLkPkpW86kANs3NShLVP828lSDQNN1135wXbGGw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=c5bbbd8c3fffc3e409fc76ab748d3b1ea04e7277",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/Bt32SLkPkpW86kANs3NShLVP828lSDQNN1135wXbGGw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=69af673fc434605abc418576a3d9ae1ee6a2401d",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "HWLuVx-j-v2V6GZPRXB0mE9UzLlnGZM8FSpQ0RI2D8U"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1ckrmog",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "GabelSnabel",
			"discussion_type": null,
			"num_comments": 25,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ckrmog/introducing_pgqueuer_a_minimalist_python_job/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ckrmog/introducing_pgqueuer_a_minimalist_python_job/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714916767,
			"num_crossposts": 4,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "# Weekly Thread: Project Ideas üí°\n\nWelcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.\n\n## How it Works:\n\n1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.\n2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.\n3. **Explore**: Looking for ideas? Check out Al Sweigart's [\"The Big Book of Small Python Projects\"](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.\n\n## Guidelines:\n\n* Clearly state the difficulty level.\n* Provide a brief description and, if possible, outline the tech stack.\n* Feel free to link to tutorials or resources that might help.\n\n# Example Submissions:\n\n## Project Idea: Chatbot\n\n**Difficulty**: Intermediate\n\n**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar \n\n**Description**: Create a chatbot that can answer FAQs for a website.\n\n**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)\n\n# Project Idea: Weather Dashboard\n\n**Difficulty**: Beginner\n\n**Tech Stack**: HTML, CSS, JavaScript, API\n\n**Description**: Build a dashboard that displays real-time weather information using a weather API.\n\n**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)\n\n## Project Idea: File Organizer\n\n**Difficulty**: Beginner\n\n**Tech Stack**: Python, File I/O\n\n**Description**: Create a script that organizes files in a directory into sub-folders based on file type.\n\n**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)\n\nLet's help each other grow. Happy coding! üåü",
			"author_fullname": "t2_6l4z3",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Monday Daily Thread: Project ideas!",
			"link_flair_richtext": [
			  {
				"a": ":pythonLogo:",
				"e": "emoji",
				"u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
			  },
			  {
				"e": "text",
				"t": " Daily Thread"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "daily-thread",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cl5cl2",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.74,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 7,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": ":pythonLogo: Daily Thread",
			"can_mod_post": false,
			"score": 7,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": true,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714953609,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Project Ideas üí°&lt;/h1&gt;\n\n&lt;p&gt;Welcome to our weekly Project Ideas thread! Whether you&amp;#39;re a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Suggest a Project&lt;/strong&gt;: Comment your project idea‚Äîbe it beginner-friendly or advanced.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Build &amp;amp; Share&lt;/strong&gt;: If you complete a project, reply to the original comment, share your experience, and attach your source code.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Explore&lt;/strong&gt;: Looking for ideas? Check out Al Sweigart&amp;#39;s &lt;a href=\"https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242\"&gt;&amp;quot;The Big Book of Small Python Projects&amp;quot;&lt;/a&gt; for inspiration.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Clearly state the difficulty level.&lt;/li&gt;\n&lt;li&gt;Provide a brief description and, if possible, outline the tech stack.&lt;/li&gt;\n&lt;li&gt;Feel free to link to tutorials or resources that might help.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Example Submissions:&lt;/h1&gt;\n\n&lt;h2&gt;Project Idea: Chatbot&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: Python, NLP, Flask/FastAPI/Litestar &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a chatbot that can answer FAQs for a website.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=a37BL0stIuM\"&gt;Building a Chatbot with Python&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Project Idea: Weather Dashboard&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: HTML, CSS, JavaScript, API&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Build a dashboard that displays real-time weather information using a weather API.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=9P5MY_2i7K8\"&gt;Weather API Tutorial&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Project Idea: File Organizer&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: Python, File I/O&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a script that organizes files in a directory into sub-folders based on file type.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://automatetheboringstuff.com/2e/chapter9/\"&gt;Automate the Boring Stuff: Organizing Files&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other grow. Happy coding! üåü&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": "moderator",
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#00a6a5",
			"id": "1cl5cl2",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "AutoModerator",
			"discussion_type": null,
			"num_comments": 1,
			"send_replies": false,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cl5cl2/monday_daily_thread_project_ideas/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cl5cl2/monday_daily_thread_project_ideas/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714953609,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hello r/python,\n\nI've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot.\n\n## What My Project Does:\n\n**Key Features:**\n- **Automated Router Reboot:** Remotely trigger a reboot of your router.\n- **Monitoring:** After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed.\n- **Flexibility:** You can pass arguments dynamically (router IP, username, password, and port) or use hardcoded values within the script.\n\n**Method of Execution:**\nTo execute the script from the command line:\n```bash\npython3 reboot-router.py --ip &lt;router_ip&gt; --username &lt;username&gt; --password &lt;password&gt; --port &lt;port_number&gt;\n```\nDefault values are set, but it's highly recommended to pass arguments to the script for security reasons.\n\n## Target Audience:\n\nThis script is intended for:\n- **Tech Enthusiasts** and **Home Users** who enjoy managing their home network setups and want a quick way to automate router management.\n\n## Requirements:\n\n**Required Modules and Programs:**\n- **Python 3:** The script is written in Python 3. Ensure you have Python 3.6 or newer installed.\n- **subprocess and argparse modules:** These are standard libraries in Python and should be available with your Python installation.\n- **sshpass:** This utility is used for noninteractive password authentication with SSH. Install it using your package manager, e.g., `sudo apt-get install sshpass` for Debian/Ubuntu.\n\n## Important Router Configuration:\n\nBefore using this script, make sure your router is configured to:\n- **Enable SSH Access:** Ensure SSH is turned on and configured to accept password authentication. This setting is usually found under the `Administration` tab in your router settings.\n- **Allow ICMP Echo (Ping) Requests:** Some routers disable ICMP Echo requests by default for security. You must enable `Respond ICMP Echo (ping) Request from WAN` under the `Firewall` tab.\n\n## Comparison:\n\nUnlike many GUI-based tools, this script provides a simple, lightweight command-line solution easily integrated into larger automation workflows or triggered manually without logging into the router interface.\n\n### For People New to Python:\n\nIf you're new to scripting or network management, be cautious about storing sensitive information like passwords directly in scripts. While hardcoded values can be used for ease and demonstration, the best practice is to pass these securely as arguments to prevent exposure.\n\n### Access to the script\nYou can access the script on my GitHub page [here](https://github.com/slyfox1186/script-repo/blob/main/Python3/reboot-router.py)\n\nFeel free to use, modify, and share this script! I look forward to your feedback and enhancements!\n\nCheers -J",
			"author_fullname": "t2_krtfo",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Reboot Your Router with a Python Script",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ck452a",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.67,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 74,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 74,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": 1714852249,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714839770,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello &lt;a href=\"/r/python\"&gt;r/python&lt;/a&gt;,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot.&lt;/p&gt;\n\n&lt;h2&gt;What My Project Does:&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt;\n- &lt;strong&gt;Automated Router Reboot:&lt;/strong&gt; Remotely trigger a reboot of your router.\n- &lt;strong&gt;Monitoring:&lt;/strong&gt; After sending the reboot command, the script counts down from 350 seconds and starts checking the router&amp;#39;s status by pinging it after the first 100 seconds have passed.\n- &lt;strong&gt;Flexibility:&lt;/strong&gt; You can pass arguments dynamically (router IP, username, password, and port) or use hardcoded values within the script.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Method of Execution:&lt;/strong&gt;\nTo execute the script from the command line:\n&lt;code&gt;bash\npython3 reboot-router.py --ip &amp;lt;router_ip&amp;gt; --username &amp;lt;username&amp;gt; --password &amp;lt;password&amp;gt; --port &amp;lt;port_number&amp;gt;\n&lt;/code&gt;\nDefault values are set, but it&amp;#39;s highly recommended to pass arguments to the script for security reasons.&lt;/p&gt;\n\n&lt;h2&gt;Target Audience:&lt;/h2&gt;\n\n&lt;p&gt;This script is intended for:\n- &lt;strong&gt;Tech Enthusiasts&lt;/strong&gt; and &lt;strong&gt;Home Users&lt;/strong&gt; who enjoy managing their home network setups and want a quick way to automate router management.&lt;/p&gt;\n\n&lt;h2&gt;Requirements:&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Required Modules and Programs:&lt;/strong&gt;\n- &lt;strong&gt;Python 3:&lt;/strong&gt; The script is written in Python 3. Ensure you have Python 3.6 or newer installed.\n- &lt;strong&gt;subprocess and argparse modules:&lt;/strong&gt; These are standard libraries in Python and should be available with your Python installation.\n- &lt;strong&gt;sshpass:&lt;/strong&gt; This utility is used for noninteractive password authentication with SSH. Install it using your package manager, e.g., &lt;code&gt;sudo apt-get install sshpass&lt;/code&gt; for Debian/Ubuntu.&lt;/p&gt;\n\n&lt;h2&gt;Important Router Configuration:&lt;/h2&gt;\n\n&lt;p&gt;Before using this script, make sure your router is configured to:\n- &lt;strong&gt;Enable SSH Access:&lt;/strong&gt; Ensure SSH is turned on and configured to accept password authentication. This setting is usually found under the &lt;code&gt;Administration&lt;/code&gt; tab in your router settings.\n- &lt;strong&gt;Allow ICMP Echo (Ping) Requests:&lt;/strong&gt; Some routers disable ICMP Echo requests by default for security. You must enable &lt;code&gt;Respond ICMP Echo (ping) Request from WAN&lt;/code&gt; under the &lt;code&gt;Firewall&lt;/code&gt; tab.&lt;/p&gt;\n\n&lt;h2&gt;Comparison:&lt;/h2&gt;\n\n&lt;p&gt;Unlike many GUI-based tools, this script provides a simple, lightweight command-line solution easily integrated into larger automation workflows or triggered manually without logging into the router interface.&lt;/p&gt;\n\n&lt;h3&gt;For People New to Python:&lt;/h3&gt;\n\n&lt;p&gt;If you&amp;#39;re new to scripting or network management, be cautious about storing sensitive information like passwords directly in scripts. While hardcoded values can be used for ease and demonstration, the best practice is to pass these securely as arguments to prevent exposure.&lt;/p&gt;\n\n&lt;h3&gt;Access to the script&lt;/h3&gt;\n\n&lt;p&gt;You can access the script on my GitHub page &lt;a href=\"https://github.com/slyfox1186/script-repo/blob/main/Python3/reboot-router.py\"&gt;here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Feel free to use, modify, and share this script! I look forward to your feedback and enhancements!&lt;/p&gt;\n\n&lt;p&gt;Cheers -J&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/TuyzGwsBUthTXBb9C2kqydG-1ZIRwRwZ8VY7ss10x6c.jpg?auto=webp&amp;s=7770d642c93371f26b22a8d8773c82eb10a36eb9",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/TuyzGwsBUthTXBb9C2kqydG-1ZIRwRwZ8VY7ss10x6c.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=b4ba3f046242cff15074ce83ade1ca177f199a93",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/TuyzGwsBUthTXBb9C2kqydG-1ZIRwRwZ8VY7ss10x6c.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=c7c23f22e3d23fa0cea36cf86389b06178eb788c",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/TuyzGwsBUthTXBb9C2kqydG-1ZIRwRwZ8VY7ss10x6c.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=65cd9992c8dfcd2f8f85347532d486d20b7e22a0",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/TuyzGwsBUthTXBb9C2kqydG-1ZIRwRwZ8VY7ss10x6c.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=0c48a9989ddc2c186fe97b5bac33adfbb350d3c5",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/TuyzGwsBUthTXBb9C2kqydG-1ZIRwRwZ8VY7ss10x6c.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6bb1c48f597fd18f548ba47ce1d9dfc916db74de",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/TuyzGwsBUthTXBb9C2kqydG-1ZIRwRwZ8VY7ss10x6c.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=ae696e7c9149c733903ffb87aafd1815d4e0da2a",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "8rS6Z4MuZVR9qPISCp08xaZWze7p7brW5xReWMpBy1g"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1ck452a",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "SAV_NC",
			"discussion_type": null,
			"num_comments": 25,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ck452a/reboot_your_router_with_a_python_script/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ck452a/reboot_your_router_with_a_python_script/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714839770,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hello folks, I am the author of [NiPyAPI](https://github.com/Chaffelson/nipyapi), the defacto Python client for the Apache NiFi project.\n\nFor those unfamiliar, [Apache NiFi](https://nifi.apache.org/) is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow.\n\nAmongst many features, NiFi allows for Command &amp; Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design &amp; Deploy approach by running it through [Swagger Codegen 2.3](https://github.com/Chaffelson/nipyapi/blob/main/resources/client_gen/generate_api_client.sh) tool shaped by mustache templates. This produces a **very** verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library.\n\nHowever it's always bugged me that this produces literally 10's of thousands of lines of boilerplate, so potentially replacing the low level client with something more modern would ideally massively reduce the codebase without impacting the high-level functionality of the library.\n\nNow, I first started it mid last decade with Python2 for broad compatibility and times have moved on significantly (as has my skill with Python) but it's finally time to drop Python2 support and move to a better build &amp; release process, which opens the door to a larger update, and I am frankly not across modern best-practices around ClientGen so I come seeking r/Python's advice: How would you modernise this venerable artefact?\n\nI could simply move to a newer version of Swagger Codegen, or move into the OpenAPI Generator, I could get fancy with something like [Fern](https://www.buildwithfern.com/) \\- or I could leave well enough alone and just accept that the tons of boilerplate are at least very readable.",
			"author_fullname": "t2_5s7cb",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Opinions sought: Modernising the Apache NiFi Python client",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cknhb0",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 1,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 1,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 1,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": 1714908484,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714901561,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello folks, I am the author of &lt;a href=\"https://github.com/Chaffelson/nipyapi\"&gt;NiPyAPI&lt;/a&gt;, the defacto Python client for the Apache NiFi project.&lt;/p&gt;\n\n&lt;p&gt;For those unfamiliar, &lt;a href=\"https://nifi.apache.org/\"&gt;Apache NiFi&lt;/a&gt; is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow.&lt;/p&gt;\n\n&lt;p&gt;Amongst many features, NiFi allows for Command &amp;amp; Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design &amp;amp; Deploy approach by running it through &lt;a href=\"https://github.com/Chaffelson/nipyapi/blob/main/resources/client_gen/generate_api_client.sh\"&gt;Swagger Codegen 2.3&lt;/a&gt; tool shaped by mustache templates. This produces a &lt;strong&gt;very&lt;/strong&gt; verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library.&lt;/p&gt;\n\n&lt;p&gt;However it&amp;#39;s always bugged me that this produces literally 10&amp;#39;s of thousands of lines of boilerplate, so potentially replacing the low level client with something more modern would ideally massively reduce the codebase without impacting the high-level functionality of the library.&lt;/p&gt;\n\n&lt;p&gt;Now, I first started it mid last decade with Python2 for broad compatibility and times have moved on significantly (as has my skill with Python) but it&amp;#39;s finally time to drop Python2 support and move to a better build &amp;amp; release process, which opens the door to a larger update, and I am frankly not across modern best-practices around ClientGen so I come seeking &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt;&amp;#39;s advice: How would you modernise this venerable artefact?&lt;/p&gt;\n\n&lt;p&gt;I could simply move to a newer version of Swagger Codegen, or move into the OpenAPI Generator, I could get fancy with something like &lt;a href=\"https://www.buildwithfern.com/\"&gt;Fern&lt;/a&gt; - or I could leave well enough alone and just accept that the tons of boilerplate are at least very readable.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/Kxk8PJ8UG99OudjGfHqOuDEcZgaUrwgNynzCEoDEAZc.jpg?auto=webp&amp;s=aa808d8def9f411c83b99cedcdf7cd68cd133ada",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/Kxk8PJ8UG99OudjGfHqOuDEcZgaUrwgNynzCEoDEAZc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=8d9ed7aaff5fd6bed91407d1389fb650b7717801",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/Kxk8PJ8UG99OudjGfHqOuDEcZgaUrwgNynzCEoDEAZc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a25b7581c495fa53721e510b33731954d8548ab3",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/Kxk8PJ8UG99OudjGfHqOuDEcZgaUrwgNynzCEoDEAZc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=381c7a0d4ca927fbd590f9cc45ace5d9ec65d5bd",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/Kxk8PJ8UG99OudjGfHqOuDEcZgaUrwgNynzCEoDEAZc.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4788f20e62e9d1107483a7608693282b275d431c",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/Kxk8PJ8UG99OudjGfHqOuDEcZgaUrwgNynzCEoDEAZc.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7ff080689a647c70760bc43f7161e6105f7d896c",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/Kxk8PJ8UG99OudjGfHqOuDEcZgaUrwgNynzCEoDEAZc.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=8737b61b86898c1e771769f9b1a14148b0228cc8",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "Ibhsn1bbb_o7vRaj-geB5Gtqd2P8hQ70ai2J0OuNdtY"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1cknhb0",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "Samausi",
			"discussion_type": null,
			"num_comments": 1,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cknhb0/opinions_sought_modernising_the_apache_nifi/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cknhb0/opinions_sought_modernising_the_apache_nifi/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714901561,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Listen at [https://podcast.pythontest.com/episodes/220-juggling-pycon](https://podcast.pythontest.com/episodes/220-juggling-pycon)  \nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community.\n\nThe juggling at PyCon is one of the inspirations for [PythonPeople.fm](https://PythonPeople.fm), one of PythonTests's sibling podcasts.\n\nDo you have any conference tips to add?",
			"author_fullname": "t2_7lh4o",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ckc18e",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.69,
			"author_flair_background_color": "#cc3600",
			"subreddit_type": "public",
			"ups": 5,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": "90124b50-0319-11ef-b326-a2eb6b76c842",
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 5,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [
			  {
				"e": "text",
				"t": "Podcast Host"
			  }
			],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714860955,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "richtext",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Listen at &lt;a href=\"https://podcast.pythontest.com/episodes/220-juggling-pycon\"&gt;https://podcast.pythontest.com/episodes/220-juggling-pycon&lt;/a&gt;&lt;br/&gt;\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community.&lt;/p&gt;\n\n&lt;p&gt;The juggling at PyCon is one of the inspirations for &lt;a href=\"https://PythonPeople.fm\"&gt;PythonPeople.fm&lt;/a&gt;, one of PythonTests&amp;#39;s sibling podcasts.&lt;/p&gt;\n\n&lt;p&gt;Do you have any conference tips to add?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/oT7HKlGteHTIWKab_8RDzFBb5yZPIepRyf3w5x0VUH8.jpg?auto=webp&amp;s=25e0298c46b26fc59e4992a4ec38af5a47683346",
					"width": 500,
					"height": 151
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/oT7HKlGteHTIWKab_8RDzFBb5yZPIepRyf3w5x0VUH8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c024d9a3a24b74eb1272adab5d382be6a9ed841e",
					  "width": 108,
					  "height": 32
					},
					{
					  "url": "https://external-preview.redd.it/oT7HKlGteHTIWKab_8RDzFBb5yZPIepRyf3w5x0VUH8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9127f1902286a912f8c6711e617059a21164ae87",
					  "width": 216,
					  "height": 65
					},
					{
					  "url": "https://external-preview.redd.it/oT7HKlGteHTIWKab_8RDzFBb5yZPIepRyf3w5x0VUH8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=91ec81b50e7bb672b67448c00cdc50207f7bdb44",
					  "width": 320,
					  "height": 96
					}
				  ],
				  "variants": {

				  },
				  "id": "O3QNQ9MFd273VzNpyo3N6zFvTW84ReSZRDWjREXjLok"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": "Podcast Host",
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1ckc18e",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "variedthoughts",
			"discussion_type": null,
			"num_comments": 1,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": "light",
			"permalink": "/r/Python/comments/1ckc18e/python_test_220_getting_the_most_out_of_pycon/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ckc18e/python_test_220_getting_the_most_out_of_pycon/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714860955,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "I have searched ait and found this channel which gave from scratch to intermediate level resources, as I was wandering around search for each source I found this channel is posting new, articles and research papers and awesome books and videos which were really helpful for me, checkout the link in below if you also want to join.\n\nTelegram channel:- https://t.me/data_science_updates",
			"author_fullname": "t2_jezly5vy",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "I found the best channel for Data science!! ",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Resource"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "resource",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ckicy3",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 1,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 1,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Resource",
			"can_mod_post": false,
			"score": 1,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714880712,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have searched ait and found this channel which gave from scratch to intermediate level resources, as I was wandering around search for each source I found this channel is posting new, articles and research papers and awesome books and videos which were really helpful for me, checkout the link in below if you also want to join.&lt;/p&gt;\n\n&lt;p&gt;Telegram channel:- &lt;a href=\"https://t.me/data_science_updates\"&gt;https://t.me/data_science_updates&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ddbd37",
			"id": "1ckicy3",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "TopicUnhappy2320",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ckicy3/i_found_the_best_channel_for_data_science/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ckicy3/i_found_the_best_channel_for_data_science/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714880712,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated",
			"author_fullname": "t2_9b9272xt",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Suggestions for python libraries to contribute to",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cjt02h",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.62,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 11,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 11,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714800800,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1cjt02h",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "JimJimBerry",
			"discussion_type": null,
			"num_comments": 14,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cjt02h/suggestions_for_python_libraries_to_contribute_to/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cjt02h/suggestions_for_python_libraries_to_contribute_to/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714800800,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Python Streamlit is terrific for putting together interactive dashboards. \n\nCombined with the geopandas library, streamlit can easily display GIS data points on a map for you. \n\nForest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. \n\nCan I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)?\n\nAnd can I give the user the ability to choose a month? \n\nYou bet! Let me step you through how!\n\nFREE tutorial (with code):\n\n[https://johnloewen.substack.com/p/simple-interactive-python-streamlit](https://johnloewen.substack.com/p/simple-interactive-python-streamlit)",
			"author_fullname": "t2_668cvqsz6",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Tutorial"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "tutorial",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cj57lw",
			"quarantine": false,
			"link_flair_text_color": "dark",
			"upvote_ratio": 0.86,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 46,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Tutorial",
			"can_mod_post": false,
			"score": 46,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714731739,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Python Streamlit is terrific for putting together interactive dashboards. &lt;/p&gt;\n\n&lt;p&gt;Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. &lt;/p&gt;\n\n&lt;p&gt;Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. &lt;/p&gt;\n\n&lt;p&gt;Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)?&lt;/p&gt;\n\n&lt;p&gt;And can I give the user the ability to choose a month? &lt;/p&gt;\n\n&lt;p&gt;You bet! Let me step you through how!&lt;/p&gt;\n\n&lt;p&gt;FREE tutorial (with code):&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://johnloewen.substack.com/p/simple-interactive-python-streamlit\"&gt;https://johnloewen.substack.com/p/simple-interactive-python-streamlit&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/kokqNq1KPd2lb7HcYcUCwMM7SakLsoj85qctUQs_EPk.jpg?auto=webp&amp;s=4cbf1447ee002dd48bc31672af18ddd8aa408429",
					"width": 1067,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/kokqNq1KPd2lb7HcYcUCwMM7SakLsoj85qctUQs_EPk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f2e355b32aa0159242b3450f7b69fdc37678dd6f",
					  "width": 108,
					  "height": 60
					},
					{
					  "url": "https://external-preview.redd.it/kokqNq1KPd2lb7HcYcUCwMM7SakLsoj85qctUQs_EPk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=ce7b8f406f0872544bbbcc37ea0e673a676223df",
					  "width": 216,
					  "height": 121
					},
					{
					  "url": "https://external-preview.redd.it/kokqNq1KPd2lb7HcYcUCwMM7SakLsoj85qctUQs_EPk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=208f55fe8ace693e049d6cf7b8aaaa38aaadb073",
					  "width": 320,
					  "height": 179
					},
					{
					  "url": "https://external-preview.redd.it/kokqNq1KPd2lb7HcYcUCwMM7SakLsoj85qctUQs_EPk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6bf0b2d21a5d1a9f741c680955ac4eb55b74cd1c",
					  "width": 640,
					  "height": 359
					},
					{
					  "url": "https://external-preview.redd.it/kokqNq1KPd2lb7HcYcUCwMM7SakLsoj85qctUQs_EPk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=b9517edb217fae632f7addc8076d9aa837c9edcd",
					  "width": 960,
					  "height": 539
					}
				  ],
				  "variants": {

				  },
				  "id": "89be6R-k7iERax5Y0KPq7hux_JGL-ta1_HRyJDsUhSQ"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#dadada",
			"id": "1cj57lw",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "jgloewen",
			"discussion_type": null,
			"num_comments": 6,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cj57lw/project_simple_interactive_python_streamlit_maps/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cj57lw/project_simple_interactive_python_streamlit_maps/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714731739,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "# Weekly Thread: Resource Request and Sharing üìö\n\nStumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!\n\n## How it Works:\n\n1. **Request**: Can't find a resource on a particular topic? Ask here!\n2. **Share**: Found something useful? Share it with the community.\n3. **Review**: Give or get opinions on Python resources you've used.\n\n## Guidelines:\n\n* Please include the type of resource (e.g., book, video, article) and the topic.\n* Always be respectful when reviewing someone else's shared resource.\n\n## Example Shares:\n\n1. **Book**: [\"Fluent Python\"](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \\- Great for understanding Pythonic idioms.\n2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \\- Excellent overview of Python's built-in data structures.\n3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \\- A deep dive into decorators.\n\n## Example Requests:\n\n1. **Looking for**: Video tutorials on web scraping with Python.\n2. **Need**: Book recommendations for Python machine learning.\n\nShare the knowledge, enrich the community. Happy learning! üåü",
			"author_fullname": "t2_6l4z3",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
			"link_flair_richtext": [
			  {
				"a": ":pythonLogo:",
				"e": "emoji",
				"u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
			  },
			  {
				"e": "text",
				"t": " Daily Thread"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "daily-thread",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cjmysm",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.71,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 3,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": ":pythonLogo: Daily Thread",
			"can_mod_post": false,
			"score": 3,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": true,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714780812,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Resource Request and Sharing üìö&lt;/h1&gt;\n\n&lt;p&gt;Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt;: Can&amp;#39;t find a resource on a particular topic? Ask here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Share&lt;/strong&gt;: Found something useful? Share it with the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Review&lt;/strong&gt;: Give or get opinions on Python resources you&amp;#39;ve used.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Please include the type of resource (e.g., book, video, article) and the topic.&lt;/li&gt;\n&lt;li&gt;Always be respectful when reviewing someone else&amp;#39;s shared resource.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Book&lt;/strong&gt;: &lt;a href=\"https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008\"&gt;&amp;quot;Fluent Python&amp;quot;&lt;/a&gt; - Great for understanding Pythonic idioms.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Video&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=pkYVOmU3MgA\"&gt;Python Data Structures&lt;/a&gt; - Excellent overview of Python&amp;#39;s built-in data structures.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Article&lt;/strong&gt;: &lt;a href=\"https://realpython.com/primer-on-python-decorators/\"&gt;Understanding Python Decorators&lt;/a&gt; - A deep dive into decorators.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Example Requests:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Looking for&lt;/strong&gt;: Video tutorials on web scraping with Python.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Need&lt;/strong&gt;: Book recommendations for Python machine learning.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Share the knowledge, enrich the community. Happy learning! üåü&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#00a6a5",
			"id": "1cjmysm",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "AutoModerator",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": false,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cjmysm/saturday_daily_thread_resource_request_and/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cjmysm/saturday_daily_thread_resource_request_and/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714780812,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hello everybody,\n\nThank you for having us here, and a huge \"Thank you\" to the moderators for letting us post.\n\nWe have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. \n\nMany of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language.\n\nThe Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers.\n\nüìö You can find the book here: [https://mng.bz/aEQj](https://shortener.manning.com/aEQj)\n\nüìñ Get into the liveBook: [https://mng.bz/gvee](https://shortener.manning.com/gvee)\n\nAnd last but not the least, get 46% off with code: **receder46**\n\nHope you find the book helpful.\n\nThank you.\n\nCheers,\n\n",
			"author_fullname": "t2_nvqoip6pt",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "News"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "news",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cj8zp2",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.69,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 7,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "News",
			"can_mod_post": false,
			"score": 7,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714743741,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everybody,&lt;/p&gt;\n\n&lt;p&gt;Thank you for having us here, and a huge &amp;quot;Thank you&amp;quot; to the moderators for letting us post.&lt;/p&gt;\n\n&lt;p&gt;We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. &lt;/p&gt;\n\n&lt;p&gt;Many of you are already familiar with Naomi&amp;#39;s work and her massive contributions to the world of Python programming language.&lt;/p&gt;\n\n&lt;p&gt;The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers.&lt;/p&gt;\n\n&lt;p&gt;üìö You can find the book here: &lt;a href=\"https://shortener.manning.com/aEQj\"&gt;https://mng.bz/aEQj&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;üìñ Get into the liveBook: &lt;a href=\"https://shortener.manning.com/gvee\"&gt;https://mng.bz/gvee&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And last but not the least, get 46% off with code: &lt;strong&gt;receder46&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Hope you find the book helpful.&lt;/p&gt;\n\n&lt;p&gt;Thank you.&lt;/p&gt;\n\n&lt;p&gt;Cheers,&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/Iejhdt52osKxOmGz_HeGoFZhI-leDJEVaoT9nl33vCo.jpg?auto=webp&amp;s=09787e65109368b22d8d44f47a4982d5a1ab0025",
					"width": 2213,
					"height": 2775
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/Iejhdt52osKxOmGz_HeGoFZhI-leDJEVaoT9nl33vCo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=5aa7d7f83b3331a52567035c67f649589058e30a",
					  "width": 108,
					  "height": 135
					},
					{
					  "url": "https://external-preview.redd.it/Iejhdt52osKxOmGz_HeGoFZhI-leDJEVaoT9nl33vCo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=c001f51a3b49dda6f338b041269ae8ad821884b1",
					  "width": 216,
					  "height": 270
					},
					{
					  "url": "https://external-preview.redd.it/Iejhdt52osKxOmGz_HeGoFZhI-leDJEVaoT9nl33vCo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=66d4093915af392e1c18704fb48f2e778d921721",
					  "width": 320,
					  "height": 401
					},
					{
					  "url": "https://external-preview.redd.it/Iejhdt52osKxOmGz_HeGoFZhI-leDJEVaoT9nl33vCo.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=15c568cc36f0f594e9123cea038723d9f1edc7b7",
					  "width": 640,
					  "height": 802
					},
					{
					  "url": "https://external-preview.redd.it/Iejhdt52osKxOmGz_HeGoFZhI-leDJEVaoT9nl33vCo.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=a2138c6844b8ae5eace3aa84a1f9bc6e3f872d5d",
					  "width": 960,
					  "height": 1203
					},
					{
					  "url": "https://external-preview.redd.it/Iejhdt52osKxOmGz_HeGoFZhI-leDJEVaoT9nl33vCo.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=5bddce38fb7d9e1520a818668235f373b7b00d93",
					  "width": 1080,
					  "height": 1354
					}
				  ],
				  "variants": {

				  },
				  "id": "VzzfWiknvbKP5tWQiI1L5D9BaKCpre254q6yjkgjewA"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#7193ff",
			"id": "1cj8zp2",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "ManningBooks",
			"discussion_type": null,
			"num_comments": 1,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cj8zp2/new_book_the_quick_python_book_fourth_edition_by/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cj8zp2/new_book_the_quick_python_book_fourth_edition_by/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714743741,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Excited to share my pypi package [typedparser](https://github.com/simon-ging/typedparser) I have been working on for around 1 year now.\n\n**What My Project Does**: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module.\n\n**Target Audience**: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable.\n\n**Comparison**: For typing functionality it uses the `attrs` package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think.\n",
			"author_fullname": "t2_m34asuiao",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cj2ztk",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.85,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 20,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 20,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714722357,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Excited to share my pypi package &lt;a href=\"https://github.com/simon-ging/typedparser\"&gt;typedparser&lt;/a&gt; I have been working on for around 1 year now.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;: It enables writing CLI scripts and create an &amp;quot;args&amp;quot; variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;: For typing functionality it uses the &lt;code&gt;attrs&lt;/code&gt; package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/k2IHSwXUbA1DO9G46MlqjHlUB5ARJt29Z9jzprSzwlE.jpg?auto=webp&amp;s=8aaf579d1c3dc46cdcd3120573cbc0fbe5cdcacc",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/k2IHSwXUbA1DO9G46MlqjHlUB5ARJt29Z9jzprSzwlE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1a88fa1bcde2f754f51b736ea5519ff117fd9e6d",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/k2IHSwXUbA1DO9G46MlqjHlUB5ARJt29Z9jzprSzwlE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=87063a231db83933cb9a48abfc61bff4d58b8ea7",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/k2IHSwXUbA1DO9G46MlqjHlUB5ARJt29Z9jzprSzwlE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=bce1345dd28db83af736885e632c998d53bd18d4",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/k2IHSwXUbA1DO9G46MlqjHlUB5ARJt29Z9jzprSzwlE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=11b348f5dcc9abe14d7861ecb53a939043a679d2",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/k2IHSwXUbA1DO9G46MlqjHlUB5ARJt29Z9jzprSzwlE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=bccdbda05f0979f9590079b245b1ee59a11b82fa",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/k2IHSwXUbA1DO9G46MlqjHlUB5ARJt29Z9jzprSzwlE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=7f6415c6bd0261b3bd930e53032ff3924411cea8",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "DL0ECkZpC4yrF6XbHo7wQVqfjQWippmH7yoR2nKRdRU"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1cj2ztk",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "gings7",
			"discussion_type": null,
			"num_comments": 6,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cj2ztk/typedattr_autocompletion_and_typechecking_for_cli/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cj2ztk/typedattr_autocompletion_and_typechecking_for_cli/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714722357,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‚Äòannoyance‚Äô from Python scripting  / math. \n\n1.\t‚Å†Reflex (used to be called Pynecone) https://reflex.dev\n2.\t‚Å†Streamlit https://streamlit.io\n3.\t‚Å†Gradio https://gradio.app\n4.\t‚Å†Dash https://dash.plotly.com\n5.\t‚Å†Panel https://panel.holoviz.org/\n6.\t‚Å†Anvil https://anvil.works/\n7.    Quarto \n\nMy use case: user access the web app, choose some parameters, selects things that go or not into a model. Python returns results of my math. \nNeeds to be somewhat eye-candy and I need to use a lot of pictures to get the user input (i.e. ‚Äúwhich of these figures you like most? 1,2,3. User clicks on ‚Äú3‚Äù, 3 is considered in the model. ",
			"author_fullname": "t2_9skwnpk2",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Dash vs Reflex vs Others",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1citedj",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.85,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 41,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 41,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714690571,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‚Äòannoyance‚Äô from Python scripting  / math. &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt; ‚Å†Reflex (used to be called Pynecone) &lt;a href=\"https://reflex.dev\"&gt;https://reflex.dev&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt; ‚Å†Streamlit &lt;a href=\"https://streamlit.io\"&gt;https://streamlit.io&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt; ‚Å†Gradio &lt;a href=\"https://gradio.app\"&gt;https://gradio.app&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt; ‚Å†Dash &lt;a href=\"https://dash.plotly.com\"&gt;https://dash.plotly.com&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt; ‚Å†Panel &lt;a href=\"https://panel.holoviz.org/\"&gt;https://panel.holoviz.org/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt; ‚Å†Anvil &lt;a href=\"https://anvil.works/\"&gt;https://anvil.works/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;   Quarto &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;My use case: user access the web app, choose some parameters, selects things that go or not into a model. Python returns results of my math. \nNeeds to be somewhat eye-candy and I need to use a lot of pictures to get the user input (i.e. ‚Äúwhich of these figures you like most? 1,2,3. User clicks on ‚Äú3‚Äù, 3 is considered in the model. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1citedj",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "Sea_Split_1182",
			"discussion_type": null,
			"num_comments": 17,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1citedj/dash_vs_reflex_vs_others/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1citedj/dash_vs_reflex_vs_others/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714690571,
			"num_crossposts": 1,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "What my project does:\n\n\n\nIt basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again!\n\n\n\nTarget Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis).\n\n\n\nDisclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!\n\n\n\nHow does it differ compared to other projects: There are libraries like Openpyxl that allow you to tokenize and translate formulas but that's currently where it ends. It doesn't allow you to systematically parse out a formula and replace those pieces and add new structures and what not into it. Currently the best you can really do is translate formulas and anything other than that would need to rely on regex string matching logic or string replacements. (Which still would be fine for most people, but this just adds another layer of organization and scalability to the format).\n\n\n\nMore info about it here: https://github.com/Voltaic314/ExcelFormulaParser\n\n\n\nTo install, just do: pip install ExcelFormulaParser\n\n\n\nThank you for reading this!! Hope you guys find it useful if you're ever systematically modifying (or analyzing) spreadsheets!\n\n",
			"author_fullname": "t2_y758o",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "I made a python package that can parse Excel Formula Strings into dictionary structures! ",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cipq2f",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.89,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 57,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 57,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714681175,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;What my project does:&lt;/p&gt;\n\n&lt;p&gt;It basically takes a formula string like you&amp;#39;d get from Openpyxl like &amp;quot;=SUM(A1:B2)&amp;quot; and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again!&lt;/p&gt;\n\n&lt;p&gt;Target Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis).&lt;/p&gt;\n\n&lt;p&gt;Disclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!&lt;/p&gt;\n\n&lt;p&gt;How does it differ compared to other projects: There are libraries like Openpyxl that allow you to tokenize and translate formulas but that&amp;#39;s currently where it ends. It doesn&amp;#39;t allow you to systematically parse out a formula and replace those pieces and add new structures and what not into it. Currently the best you can really do is translate formulas and anything other than that would need to rely on regex string matching logic or string replacements. (Which still would be fine for most people, but this just adds another layer of organization and scalability to the format).&lt;/p&gt;\n\n&lt;p&gt;More info about it here: &lt;a href=\"https://github.com/Voltaic314/ExcelFormulaParser\"&gt;https://github.com/Voltaic314/ExcelFormulaParser&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To install, just do: pip install ExcelFormulaParser&lt;/p&gt;\n\n&lt;p&gt;Thank you for reading this!! Hope you guys find it useful if you&amp;#39;re ever systematically modifying (or analyzing) spreadsheets!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/VcXHNHavhx2aeLw5fwWLnjqDqqqOmY0iBFMAEkGicF8.jpg?auto=webp&amp;s=965b7d13d709335aeda60d22f6c79b9529e8f413",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/VcXHNHavhx2aeLw5fwWLnjqDqqqOmY0iBFMAEkGicF8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1a87ecfb16e25d76c7321be9cdc54c17a91ab3fc",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/VcXHNHavhx2aeLw5fwWLnjqDqqqOmY0iBFMAEkGicF8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a29a77e7ace4ad955e8259ecb975a8a94f2ff54c",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/VcXHNHavhx2aeLw5fwWLnjqDqqqOmY0iBFMAEkGicF8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=1ca761b13820d9631a6a4470432b44f9bc93c164",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/VcXHNHavhx2aeLw5fwWLnjqDqqqOmY0iBFMAEkGicF8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3ed24b3f38694bc907ab76a93aa1cf34570458a8",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/VcXHNHavhx2aeLw5fwWLnjqDqqqOmY0iBFMAEkGicF8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=df0def6fe624847c45d478600b44d972dd3d71c3",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/VcXHNHavhx2aeLw5fwWLnjqDqqqOmY0iBFMAEkGicF8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=285c35e80da52cda7b60e3bbb930cae9b7388603",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "iD95_2a3IRIs1IOAUEqY-bcS4Hxhk8HQwUq9P-iYBcc"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1cipq2f",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "MPGaming9000",
			"discussion_type": null,
			"num_comments": 8,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cipq2f/i_made_a_python_package_that_can_parse_excel/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cipq2f/i_made_a_python_package_that_can_parse_excel/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714681175,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hello everyone! I'd like to announce version 1.10.0: [https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/](https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/)\n\nFeel free to provide any feedback either here or as a discussion on the repo: [https://github.com/pypa/hatch](https://github.com/pypa/hatch)",
			"author_fullname": "t2_955uq",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Hatch v1.10.0 - UV support, new test command and built-in script runner",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "News"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "news",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cigfix",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.85,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 41,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "News",
			"can_mod_post": false,
			"score": 41,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714658446,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone! I&amp;#39;d like to announce version 1.10.0: &lt;a href=\"https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/\"&gt;https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Feel free to provide any feedback either here or as a discussion on the repo: &lt;a href=\"https://github.com/pypa/hatch\"&gt;https://github.com/pypa/hatch&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/maEFoZ9zscEmTQ1ruBNrFXmbwm4O2eTi0jY9nemmlj4.jpg?auto=webp&amp;s=dbf42a7349652c9e31d361550aba6f8100bdd147",
					"width": 1200,
					"height": 630
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/maEFoZ9zscEmTQ1ruBNrFXmbwm4O2eTi0jY9nemmlj4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=5854170d41c0b802ffb1eb0f3b2b5b677ada99d3",
					  "width": 108,
					  "height": 56
					},
					{
					  "url": "https://external-preview.redd.it/maEFoZ9zscEmTQ1ruBNrFXmbwm4O2eTi0jY9nemmlj4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=0a4e915565aad9b6c7c7b22578f699a620f45c2f",
					  "width": 216,
					  "height": 113
					},
					{
					  "url": "https://external-preview.redd.it/maEFoZ9zscEmTQ1ruBNrFXmbwm4O2eTi0jY9nemmlj4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=96cb1d820c6087ecf09a75443efea3eaa3478c47",
					  "width": 320,
					  "height": 168
					},
					{
					  "url": "https://external-preview.redd.it/maEFoZ9zscEmTQ1ruBNrFXmbwm4O2eTi0jY9nemmlj4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=e7bfa2a615ab96d139c4c4fde27e4db0a0c2cd59",
					  "width": 640,
					  "height": 336
					},
					{
					  "url": "https://external-preview.redd.it/maEFoZ9zscEmTQ1ruBNrFXmbwm4O2eTi0jY9nemmlj4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=5a000c2cf910622a29f6ac9aa60666ef9becf393",
					  "width": 960,
					  "height": 504
					},
					{
					  "url": "https://external-preview.redd.it/maEFoZ9zscEmTQ1ruBNrFXmbwm4O2eTi0jY9nemmlj4.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f278351d8a19dc31b4d042d43bdc52790e6c2ff5",
					  "width": 1080,
					  "height": 567
					}
				  ],
				  "variants": {

				  },
				  "id": "oB5RENYAeXAFwLCzlGoArbmeCngDNhgaZfQijSVBYhw"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#7193ff",
			"id": "1cigfix",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "Ofekmeister",
			"discussion_type": null,
			"num_comments": 6,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cigfix/hatch_v1100_uv_support_new_test_command_and/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cigfix/hatch_v1100_uv_support_new_test_command_and/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714658446,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses! ",
			"author_fullname": "t2_b6ahyg9f",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "What does your python development setup look like?",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cib6to",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.94,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 83,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 83,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714641488,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d like to explore other people&amp;#39;s setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone&amp;#39;s responses! &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1cib6to",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "Working_Noise_6043",
			"discussion_type": null,
			"num_comments": 109,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cib6to/what_does_your_python_development_setup_look_like/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cib6to/what_does_your_python_development_setup_look_like/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714641488,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "I made a tutorial on how to build a **server-to-server Zoom OAuth application using Python**. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\n\n* [video tutorial](https://www.youtube.com/watch?v=sQVliRl5uKw)\n* [repo](https://github.com/AssemblyAI-Examples/assemblyai-zoom-transcripts)\n* [written tutorial](https://www.assemblyai.com/blog/zoom-transcription-zoom-api/?utm_source=youtube&amp;utm_medium=referral&amp;utm_campaign=yt_ry_8)\n\n  \nThis tutorial covers:\n\n* Setting up OAuth authentication for server-to-server apps\n* Utilizing the Zoom API to access recordings\n* Implementing automatic transcription using Python",
			"author_fullname": "t2_h366h3z5",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Tutorial on Building a Server-to-Server Zoom App with Python",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Tutorial"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "tutorial",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cinnql",
			"quarantine": false,
			"link_flair_text_color": "dark",
			"upvote_ratio": 0.82,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 7,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Tutorial",
			"can_mod_post": false,
			"score": 7,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714676257,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I made a tutorial on how to build a &lt;strong&gt;server-to-server Zoom OAuth application using Python&lt;/strong&gt;. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.youtube.com/watch?v=sQVliRl5uKw\"&gt;video tutorial&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/AssemblyAI-Examples/assemblyai-zoom-transcripts\"&gt;repo&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://www.assemblyai.com/blog/zoom-transcription-zoom-api/?utm_source=youtube&amp;amp;utm_medium=referral&amp;amp;utm_campaign=yt_ry_8\"&gt;written tutorial&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This tutorial covers:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Setting up OAuth authentication for server-to-server apps&lt;/li&gt;\n&lt;li&gt;Utilizing the Zoom API to access recordings&lt;/li&gt;\n&lt;li&gt;Implementing automatic transcription using Python&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/htq5P0Q-QS0sdVjHmhcXtU2pFES07z4Ct29pxPnguQM.jpg?auto=webp&amp;s=d7aa25e4a24f405a37bad5d7c6436915e74a7879",
					"width": 480,
					"height": 360
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/htq5P0Q-QS0sdVjHmhcXtU2pFES07z4Ct29pxPnguQM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=4d5f0477c98bbab3077072ec350131a2c8fe8620",
					  "width": 108,
					  "height": 81
					},
					{
					  "url": "https://external-preview.redd.it/htq5P0Q-QS0sdVjHmhcXtU2pFES07z4Ct29pxPnguQM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=83f020dd43ed9590b0283b9b828d2671a558d536",
					  "width": 216,
					  "height": 162
					},
					{
					  "url": "https://external-preview.redd.it/htq5P0Q-QS0sdVjHmhcXtU2pFES07z4Ct29pxPnguQM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=edd2ef14ac306ff7ee65777595d99f8fffff27b9",
					  "width": 320,
					  "height": 240
					}
				  ],
				  "variants": {

				  },
				  "id": "Y-oxXlQqfQuWssx26QqRbmoVuGZCnAWrZ-kNGluZJ4M"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#dadada",
			"id": "1cinnql",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "SleekEagle",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cinnql/tutorial_on_building_a_servertoserver_zoom_app/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cinnql/tutorial_on_building_a_servertoserver_zoom_app/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714676257,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è\n\nWelcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!\n\n## How it Works:\n\n1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.\n2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.\n3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.\n\n## Guidelines:\n\n* All topics should be related to Python or the /r/python community.\n* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).\n\n## Example Topics:\n\n1. **New Python Release**: What do you think about the new features in Python 3.11?\n2. **Community Events**: Any Python meetups or webinars coming up?\n3. **Learning Resources**: Found a great Python tutorial? Share it here!\n4. **Job Market**: How has Python impacted your career?\n5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!\n6. **Community Ideas**: Something you'd like to see us do? tell us.\n\nLet's keep the conversation going. Happy discussing! üåü",
			"author_fullname": "t2_6l4z3",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
			"link_flair_richtext": [
			  {
				"a": ":pythonLogo:",
				"e": "emoji",
				"u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
			  },
			  {
				"e": "text",
				"t": " Daily Thread"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "daily-thread",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ciuske",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 1,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 1,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": ":pythonLogo: Daily Thread",
			"can_mod_post": false,
			"score": 1,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": true,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714694450,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è&lt;/h1&gt;\n\n&lt;p&gt;Welcome to Free Talk Friday on &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! This is the place to discuss the &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt; community (meta discussions), Python news, projects, or anything else Python-related!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Open Mic&lt;/strong&gt;: Share your thoughts, questions, or anything you&amp;#39;d like related to Python or the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Pulse&lt;/strong&gt;: Discuss what you feel is working well or what could be improved in the &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt; community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;News &amp;amp; Updates&lt;/strong&gt;: Keep up-to-date with the latest in Python and share any news you find interesting.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;All topics should be related to Python or the &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt; community.&lt;/li&gt;\n&lt;li&gt;Be respectful and follow Reddit&amp;#39;s &lt;a href=\"https://www.redditinc.com/policies/content-policy\"&gt;Code of Conduct&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Topics:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;New Python Release&lt;/strong&gt;: What do you think about the new features in Python 3.11?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Events&lt;/strong&gt;: Any Python meetups or webinars coming up?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Learning Resources&lt;/strong&gt;: Found a great Python tutorial? Share it here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Job Market&lt;/strong&gt;: How has Python impacted your career?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Hot Takes&lt;/strong&gt;: Got a controversial Python opinion? Let&amp;#39;s hear it!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Ideas&lt;/strong&gt;: Something you&amp;#39;d like to see us do? tell us.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s keep the conversation going. Happy discussing! üåü&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/ywF_sDnTM8UwSmxwHZ4jSOlsdarvmBMBiMQQPq8hwfM.jpg?auto=webp&amp;s=ede0ce79f1604c3b55b991ac570c5ca93bfef353",
					"width": 2400,
					"height": 1254
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/ywF_sDnTM8UwSmxwHZ4jSOlsdarvmBMBiMQQPq8hwfM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=82851f5121f8f03b148a70c422c9a7ce5272c108",
					  "width": 108,
					  "height": 56
					},
					{
					  "url": "https://external-preview.redd.it/ywF_sDnTM8UwSmxwHZ4jSOlsdarvmBMBiMQQPq8hwfM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=206ef160a2668f2dc24ca946b771a7cd6150448d",
					  "width": 216,
					  "height": 112
					},
					{
					  "url": "https://external-preview.redd.it/ywF_sDnTM8UwSmxwHZ4jSOlsdarvmBMBiMQQPq8hwfM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=9c66c492238524f127282a4710fe0d35a94f341e",
					  "width": 320,
					  "height": 167
					},
					{
					  "url": "https://external-preview.redd.it/ywF_sDnTM8UwSmxwHZ4jSOlsdarvmBMBiMQQPq8hwfM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=55debebde2ce7bb191d5587457be9fc649a9bf43",
					  "width": 640,
					  "height": 334
					},
					{
					  "url": "https://external-preview.redd.it/ywF_sDnTM8UwSmxwHZ4jSOlsdarvmBMBiMQQPq8hwfM.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7125869c03dafca657f85aeda389e0fb7999378c",
					  "width": 960,
					  "height": 501
					},
					{
					  "url": "https://external-preview.redd.it/ywF_sDnTM8UwSmxwHZ4jSOlsdarvmBMBiMQQPq8hwfM.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=713e43ca02bdc214cb60f444a8efcd198d1ce4ad",
					  "width": 1080,
					  "height": 564
					}
				  ],
				  "variants": {

				  },
				  "id": "R1325zRpVO4G1LE4dsHNhJCZJNRuqybhsXWWRwzTJQc"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#00a6a5",
			"id": "1ciuske",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "AutoModerator",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ciuske/friday_daily_thread_rpython_meta_and_freetalk/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ciuske/friday_daily_thread_rpython_meta_and_freetalk/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714694450,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "I have a simple backend REST API service that is serving a few ML models. I have made it \"secured\" by implementing an API key in order call those endpoints. \n\n  \nI was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization.\n\n  \nIf it is common and reliable, what are the best options to go for? \n\nI've read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. \n\n  \nAlso, did some googling and found this [General - Fief](https://docs.fief.dev/integrate/python/). Has anyone ever tried using this? If so, how was the experience? \n\n  \nThanks in advance. ",
			"author_fullname": "t2_46qj3zfd",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Suggestions for a self-hosted authentication as a service?",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ci9ijz",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.86,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 19,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 19,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714634324,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a simple backend REST API service that is serving a few ML models. I have made it &amp;quot;secured&amp;quot; by implementing an API key in order call those endpoints. &lt;/p&gt;\n\n&lt;p&gt;I was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization.&lt;/p&gt;\n\n&lt;p&gt;If it is common and reliable, what are the best options to go for? &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. &lt;/p&gt;\n\n&lt;p&gt;Also, did some googling and found this &lt;a href=\"https://docs.fief.dev/integrate/python/\"&gt;General - Fief&lt;/a&gt;. Has anyone ever tried using this? If so, how was the experience? &lt;/p&gt;\n\n&lt;p&gt;Thanks in advance. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1ci9ijz",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "FlyingRaijinEX",
			"discussion_type": null,
			"num_comments": 17,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ci9ijz/suggestions_for_a_selfhosted_authentication_as_a/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ci9ijz/suggestions_for_a_selfhosted_authentication_as_a/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714634324,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "I created [this tutorial](https://www.youtube.com/watch?v=HkF3_GLVKEg) after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend).",
			"author_fullname": "t2_a63fq",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Multipart File Uploads to S3 with Python",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Tutorial"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "tutorial",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ciiim4",
			"quarantine": false,
			"link_flair_text_color": "dark",
			"upvote_ratio": 0.64,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 3,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Tutorial",
			"can_mod_post": false,
			"score": 3,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714663684,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I created &lt;a href=\"https://www.youtube.com/watch?v=HkF3_GLVKEg\"&gt;this tutorial&lt;/a&gt; after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend).&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/QlBfxzbR0hSJubJ_j6e6z9fRtRBfNeqR92SejZSrM_8.jpg?auto=webp&amp;s=084fadf857d7c56e53a1e3248bc975e7e44606c0",
					"width": 480,
					"height": 360
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/QlBfxzbR0hSJubJ_j6e6z9fRtRBfNeqR92SejZSrM_8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6ea5dc98a594d626f609c82ac97d4c8bceec99a4",
					  "width": 108,
					  "height": 81
					},
					{
					  "url": "https://external-preview.redd.it/QlBfxzbR0hSJubJ_j6e6z9fRtRBfNeqR92SejZSrM_8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b79e8d8a136d1c369495ddb293f6ece1f58582f3",
					  "width": 216,
					  "height": 162
					},
					{
					  "url": "https://external-preview.redd.it/QlBfxzbR0hSJubJ_j6e6z9fRtRBfNeqR92SejZSrM_8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=f67edc1f84c2cc8a1593d6f87dafbc4e8108dcd5",
					  "width": 320,
					  "height": 240
					}
				  ],
				  "variants": {

				  },
				  "id": "KTyALPB1MoMJ3sBLbdZPrdw449GGm31TLneS9kxV7J4"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#dadada",
			"id": "1ciiim4",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "tylersavery",
			"discussion_type": null,
			"num_comments": 6,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ciiim4/multipart_file_uploads_to_s3_with_python/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ciiim4/multipart_file_uploads_to_s3_with_python/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714663684,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hello Pythonistas!  \nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it‚Äôs important to test for performance and how to integrate the measurements in the CI.  \nHere is the link to the blog: [https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests](https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests)\n\n&amp;#x200B;",
			"author_fullname": "t2_1401yz",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "One pytest marker to track the performance of your tests",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Tutorial"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "tutorial",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ci7m95",
			"quarantine": false,
			"link_flair_text_color": "dark",
			"upvote_ratio": 0.88,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 17,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Tutorial",
			"can_mod_post": false,
			"score": 17,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714627104,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello Pythonistas!&lt;br/&gt;\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it‚Äôs important to test for performance and how to integrate the measurements in the CI.&lt;br/&gt;\nHere is the link to the blog: &lt;a href=\"https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests\"&gt;https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/PPq-ffwI9aSInijen77w_k00iUZZAwS-qSFtcDxfYF8.jpg?auto=webp&amp;s=8243f82aabb2fcd9686896805b685115fce13bc4",
					"width": 2400,
					"height": 1200
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/PPq-ffwI9aSInijen77w_k00iUZZAwS-qSFtcDxfYF8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=3aee9768ff005defc1857c2b77b6980675c8abfe",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/PPq-ffwI9aSInijen77w_k00iUZZAwS-qSFtcDxfYF8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=25a40a00517ee40d24962960fa25b539f5d31f02",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/PPq-ffwI9aSInijen77w_k00iUZZAwS-qSFtcDxfYF8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=8a5e6e27029fa91d10701bb7cdf20c9ee9eb864d",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/PPq-ffwI9aSInijen77w_k00iUZZAwS-qSFtcDxfYF8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ec28483bfeadd94c1b0047c0b6e955453bab141f",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/PPq-ffwI9aSInijen77w_k00iUZZAwS-qSFtcDxfYF8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=04d05c9450b2ab5bd3599efc6531c702ea4ab4d6",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/PPq-ffwI9aSInijen77w_k00iUZZAwS-qSFtcDxfYF8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=493687bf6d040736031984ff8c5a3f1d581642e0",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "nOUzNXfIR6vnjS2j3o5tx_WkGhMQb5CWlT3VeEHlwUY"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#dadada",
			"id": "1ci7m95",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "toodarktoshine",
			"discussion_type": null,
			"num_comments": 2,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ci7m95/one_pytest_marker_to_track_the_performance_of/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ci7m95/one_pytest_marker_to_track_the_performance_of/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714627104,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams.\n\n\\[TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free\\]\n\nArticle link: [https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams](https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams) ",
			"author_fullname": "t2_o7wvmk6lp",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "How to create architecture diagrams from code in Jupyter Notebook",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Tutorial"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "tutorial",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ci4l9t",
			"quarantine": false,
			"link_flair_text_color": "dark",
			"upvote_ratio": 0.91,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 26,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Tutorial",
			"can_mod_post": false,
			"score": 26,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714617126,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams.&lt;/p&gt;\n\n&lt;p&gt;[TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free]&lt;/p&gt;\n\n&lt;p&gt;Article link: &lt;a href=\"https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams\"&gt;https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams&lt;/a&gt; &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/FOGt0GhNjYpvqeSAhhD0De79GuZBVpWmo44u3EcMgwM.jpg?auto=webp&amp;s=d182ad75ab580413bd424fb2ae37f67849a32a3e",
					"width": 931,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/FOGt0GhNjYpvqeSAhhD0De79GuZBVpWmo44u3EcMgwM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=108177606bf518f98fd623363ea39ff8ab5bfad3",
					  "width": 108,
					  "height": 69
					},
					{
					  "url": "https://external-preview.redd.it/FOGt0GhNjYpvqeSAhhD0De79GuZBVpWmo44u3EcMgwM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=4910e9dbce752029b0bb9a366b70c41ba5112cee",
					  "width": 216,
					  "height": 139
					},
					{
					  "url": "https://external-preview.redd.it/FOGt0GhNjYpvqeSAhhD0De79GuZBVpWmo44u3EcMgwM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a492110bcc8a5ba7281e2c65d6fc727f4b1afa00",
					  "width": 320,
					  "height": 206
					},
					{
					  "url": "https://external-preview.redd.it/FOGt0GhNjYpvqeSAhhD0De79GuZBVpWmo44u3EcMgwM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=09415788967627e1bb8847dcf3a56225603b9d65",
					  "width": 640,
					  "height": 412
					}
				  ],
				  "variants": {

				  },
				  "id": "Ytq3jxzRPa4yATcD3xgr6exJ0ZYrUKjlbuWdCTXLNzE"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#dadada",
			"id": "1ci4l9t",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "writer_on_rails",
			"discussion_type": null,
			"num_comments": 2,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ci4l9t/how_to_create_architecture_diagrams_from_code_in/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ci4l9t/how_to_create_architecture_diagrams_from_code_in/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714617126,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hey everyone üëã\n\n**TL;DR**  \nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine.\n\nI've uploaded a video tutorial here: [https://www.youtube.com/watch?v=2fD\\_SAouoOs&amp;ab\\_channel=2BytesGoat](https://www.youtube.com/watch?v=2fD_SAouoOs&amp;ab_channel=2BytesGoat)\n\nAnd the Github code is here: [https://github.com/2BYTESGOAT/AI-ASSISTANT](https://github.com/2BYTESGOAT/AI-ASSISTANT)\n\n  \n**Longer version**\n\n* **What my project does:** It's the starter code for an AI assistant that you can run locally. More precisely, it's a ChatGPT / Llama 2 agent that has access to Google Search and can get businesses nearby based on your location. The tool can be easily extended to support other APIs.\n* **Target audience**: Pythoneers that are curious about LLMs and LLM related libraries.\n* **Comparison**: It was inspired by projects such as the Humane AI Pin and the Rabbit R1. Though it's a inferior version to those, it serves more as a playground for people to develop their own AI assistants. ",
			"author_fullname": "t2_b75pzty6",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Starter Code for a LLM-based AI Assistant ",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cinjg9",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.5,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 0,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 0,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714675961,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone üëã&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;br/&gt;\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve uploaded a video tutorial here: &lt;a href=\"https://www.youtube.com/watch?v=2fD_SAouoOs&amp;amp;ab_channel=2BytesGoat\"&gt;https://www.youtube.com/watch?v=2fD_SAouoOs&amp;amp;ab_channel=2BytesGoat&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And the Github code is here: &lt;a href=\"https://github.com/2BYTESGOAT/AI-ASSISTANT\"&gt;https://github.com/2BYTESGOAT/AI-ASSISTANT&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Longer version&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;What my project does:&lt;/strong&gt; It&amp;#39;s the starter code for an AI assistant that you can run locally. More precisely, it&amp;#39;s a ChatGPT / Llama 2 agent that has access to Google Search and can get businesses nearby based on your location. The tool can be easily extended to support other APIs.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Target audience&lt;/strong&gt;: Pythoneers that are curious about LLMs and LLM related libraries.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Comparison&lt;/strong&gt;: It was inspired by projects such as the Humane AI Pin and the Rabbit R1. Though it&amp;#39;s a inferior version to those, it serves more as a playground for people to develop their own AI assistants. &lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/b9UKhTqNCyqRgEnaFbCQL57ZyZ0scWMVl76T8Ut2hyA.jpg?auto=webp&amp;s=37e6ce9ebb801f54bc13eab80cca28afee5e0092",
					"width": 480,
					"height": 360
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/b9UKhTqNCyqRgEnaFbCQL57ZyZ0scWMVl76T8Ut2hyA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=ece3f531ca64d2f5d11be758c8a6e9870cd45691",
					  "width": 108,
					  "height": 81
					},
					{
					  "url": "https://external-preview.redd.it/b9UKhTqNCyqRgEnaFbCQL57ZyZ0scWMVl76T8Ut2hyA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f27b08c7d002afa47b2ed87646dc2d5f7e127092",
					  "width": 216,
					  "height": 162
					},
					{
					  "url": "https://external-preview.redd.it/b9UKhTqNCyqRgEnaFbCQL57ZyZ0scWMVl76T8Ut2hyA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=cbae573268976d567482dfbd1d6dff373fda0d39",
					  "width": 320,
					  "height": 240
					}
				  ],
				  "variants": {

				  },
				  "id": "DPLdNHNdHICoPGdPiKQRRfyTdON3tZ9y4Vw9BR9PaDU"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1cinjg9",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "2bytesgoat",
			"discussion_type": null,
			"num_comments": 6,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cinjg9/starter_code_for_a_llmbased_ai_assistant/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cinjg9/starter_code_for_a_llmbased_ai_assistant/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714675961,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "# The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\r\n\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi &amp; many more.\r  \n\r  \nThe Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe.\r  \n\r  \n10,958 subscribers - the largest Python on hardware newsletter out there.\r  \n\r  \nCatch all the weekly news on Python for Microcontrollers with [adafruitdaily.com](https://www.adafruitdaily.com).\r  \n\r  \nThis ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\r  \n\r  \nEnsure you catch the weekly Python on Hardware roundup‚Äì you can cancel anytime ‚Äì try our spam-free newsletter today!\r  \n\r  \n[https://www.adafruitdaily.com/](https://www.adafruitdaily.com/)",
			"author_fullname": "t2_qkh9xj4",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Resource"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "resource",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cigewi",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.5,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 0,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Resource",
			"can_mod_post": false,
			"score": 0,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714658409,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free&lt;/h1&gt;\n\n&lt;p&gt;With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi &amp;amp; many more.&lt;/p&gt;\n\n&lt;p&gt;The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe.&lt;/p&gt;\n\n&lt;p&gt;10,958 subscribers - the largest Python on hardware newsletter out there.&lt;/p&gt;\n\n&lt;p&gt;Catch all the weekly news on Python for Microcontrollers with &lt;a href=\"https://www.adafruitdaily.com\"&gt;adafruitdaily.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!&lt;/p&gt;\n\n&lt;p&gt;Ensure you catch the weekly Python on Hardware roundup‚Äì you can cancel anytime ‚Äì try our spam-free newsletter today!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.adafruitdaily.com/\"&gt;https://www.adafruitdaily.com/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ddbd37",
			"id": "1cigewi",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "HP7933",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cigewi/the_python_on_microcontrollers_and_raspberry_pi/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cigewi/the_python_on_microcontrollers_and_raspberry_pi/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714658409,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package.\n\nIt's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers.\n\nHere's the tutorial: [https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation](https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation)",
			"author_fullname": "t2_55qvjstm",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "How to auto-instrument Python servers w/ OpenTelemetry for performance &amp; error monitoring",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Tutorial"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "tutorial",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1chtmle",
			"quarantine": false,
			"link_flair_text_color": "dark",
			"upvote_ratio": 0.86,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 21,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Tutorial",
			"can_mod_post": false,
			"score": 21,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714588661,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone! We&amp;#39;ve recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they&amp;#39;re looking to add better instrumentation to their servers.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s the tutorial: &lt;a href=\"https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation\"&gt;https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/c16AzFtQB-cQGp9d-TJ0b2BUp1nRRnojabqY6OGICG0.jpg?auto=webp&amp;s=6bf6844373a0dfa1f55092242720917f576d96f8",
					"width": 1325,
					"height": 432
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/c16AzFtQB-cQGp9d-TJ0b2BUp1nRRnojabqY6OGICG0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=47e116d687e16d6da5f267e04068bffc3ac9d148",
					  "width": 108,
					  "height": 35
					},
					{
					  "url": "https://external-preview.redd.it/c16AzFtQB-cQGp9d-TJ0b2BUp1nRRnojabqY6OGICG0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=7396bd20404fba4fa18f4aa05959dd3225920f6a",
					  "width": 216,
					  "height": 70
					},
					{
					  "url": "https://external-preview.redd.it/c16AzFtQB-cQGp9d-TJ0b2BUp1nRRnojabqY6OGICG0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=83c3b698c7bc79bcce8db393a33e9e7cb97de8e2",
					  "width": 320,
					  "height": 104
					},
					{
					  "url": "https://external-preview.redd.it/c16AzFtQB-cQGp9d-TJ0b2BUp1nRRnojabqY6OGICG0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=fb353bb0eeceaf36f61e474ec15d8ecc2ce51c3b",
					  "width": 640,
					  "height": 208
					},
					{
					  "url": "https://external-preview.redd.it/c16AzFtQB-cQGp9d-TJ0b2BUp1nRRnojabqY6OGICG0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=bde3cc2263317248706306225603edd9301d7b39",
					  "width": 960,
					  "height": 312
					},
					{
					  "url": "https://external-preview.redd.it/c16AzFtQB-cQGp9d-TJ0b2BUp1nRRnojabqY6OGICG0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=404fad482269ec0d3956c5ba77de8cdef176ff8b",
					  "width": 1080,
					  "height": 352
					}
				  ],
				  "variants": {

				  },
				  "id": "Y_lKgi192sj_CTEqRBg0Tbgq6DvQd38JirPZzrHYb1M"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#dadada",
			"id": "1chtmle",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "__boba__",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1chtmle/how_to_autoinstrument_python_servers_w/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1chtmle/how_to_autoinstrument_python_servers_w/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714588661,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "# Weekly Thread: Professional Use, Jobs, and Education üè¢\n\nWelcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.\n\n---\n\n## How it Works:\n\n1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.\n2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.\n3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.\n\n---\n\n## Guidelines:\n\n- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.\n- Keep discussions relevant to Python in the professional and educational context.\n  \n---\n\n## Example Topics:\n\n1. **Career Paths**: What kinds of roles are out there for Python developers?\n2. **Certifications**: Are Python certifications worth it?\n3. **Course Recommendations**: Any good advanced Python courses to recommend?\n4. **Workplace Tools**: What Python libraries are indispensable in your professional work?\n5. **Interview Tips**: What types of Python questions are commonly asked in interviews?\n\n---\n\nLet's help each other grow in our careers and education. Happy discussing! üåü",
			"author_fullname": "t2_6l4z3",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
			"link_flair_richtext": [
			  {
				"a": ":pythonLogo:",
				"e": "emoji",
				"u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
			  },
			  {
				"e": "text",
				"t": " Daily Thread"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "daily-thread",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ci1f9v",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.76,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 6,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": ":pythonLogo: Daily Thread",
			"can_mod_post": false,
			"score": 6,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": true,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714608008,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Professional Use, Jobs, and Education üè¢&lt;/h1&gt;\n\n&lt;p&gt;Welcome to this week&amp;#39;s discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is &lt;strong&gt;not for recruitment&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Career Talk&lt;/strong&gt;: Discuss using Python in your job, or the job market for Python roles.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Education Q&amp;amp;A&lt;/strong&gt;: Ask or answer questions about Python courses, certifications, and educational resources.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Workplace Chat&lt;/strong&gt;: Share your experiences, challenges, or success stories about using Python professionally.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is &lt;strong&gt;not for recruitment&lt;/strong&gt;. For job postings, please see &lt;a href=\"/r/PythonJobs\"&gt;r/PythonJobs&lt;/a&gt; or the recruitment thread in the sidebar.&lt;/li&gt;\n&lt;li&gt;Keep discussions relevant to Python in the professional and educational context.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Example Topics:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Career Paths&lt;/strong&gt;: What kinds of roles are out there for Python developers?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Certifications&lt;/strong&gt;: Are Python certifications worth it?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Course Recommendations&lt;/strong&gt;: Any good advanced Python courses to recommend?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Workplace Tools&lt;/strong&gt;: What Python libraries are indispensable in your professional work?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Interview Tips&lt;/strong&gt;: What types of Python questions are commonly asked in interviews?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other grow in our careers and education. Happy discussing! üåü&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": "moderator",
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#00a6a5",
			"id": "1ci1f9v",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "AutoModerator",
			"discussion_type": null,
			"num_comments": 2,
			"send_replies": false,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ci1f9v/thursday_daily_thread_python_careers_courses_and/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ci1f9v/thursday_daily_thread_python_careers_courses_and/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714608008,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "**What my project does:**\n\nI wanted to share an open-source project I‚Äôve been working on called k8sAI. It‚Äôs a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI!\n\n**Target Audience:**\n\nAs a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It‚Äôs also found several issues in my cluster for me - all I‚Äôve had to do is point it in the right direction. I‚Äôve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don‚Äôt need to copy and paste into ChatGPT anymore!\n\nk8sAI operates with read-only kubectl commands to make sure your cluster stays safe.\n\nAll you need is an OpenAI API key and a valid kubectl config. Start chatting with k8sAI using:\n\n    $ pip install k8sAI\n    $ k8sAI chat\n\nor to fix an issue:\n\n    $ k8sAI fix -p=\"take a look at the failing pod in the test namespace\"\n\nWould love to get any feedback you guys have!\n\n[Here's the repo](https://github.com/wilson090/k8sAI) for anyone who wants to take a look\n\n**Comparison:**  \nI found a tool (k8sGPT) that I enjoyed using, but I felt it was still missing a few pieces on the chatbot side. You can't chat back and forth with k8sGPT and it doesn't suggest commands for you to execute, so I decided to make this. ",
			"author_fullname": "t2_jlwnzke8w",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "k8sAI - my open-source GPT CLI tool for Kubernetes!",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cij4mp",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.45,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 0,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 0,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714665158,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What my project does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I wanted to share an open-source project I‚Äôve been working on called k8sAI. It‚Äôs a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It‚Äôs also found several issues in my cluster for me - all I‚Äôve had to do is point it in the right direction. I‚Äôve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don‚Äôt need to copy and paste into ChatGPT anymore!&lt;/p&gt;\n\n&lt;p&gt;k8sAI operates with read-only kubectl commands to make sure your cluster stays safe.&lt;/p&gt;\n\n&lt;p&gt;All you need is an OpenAI API key and a valid kubectl config. Start chatting with k8sAI using:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ pip install k8sAI\n$ k8sAI chat\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or to fix an issue:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ k8sAI fix -p=&amp;quot;take a look at the failing pod in the test namespace&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Would love to get any feedback you guys have!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/wilson090/k8sAI\"&gt;Here&amp;#39;s the repo&lt;/a&gt; for anyone who wants to take a look&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison:&lt;/strong&gt;&lt;br/&gt;\nI found a tool (k8sGPT) that I enjoyed using, but I felt it was still missing a few pieces on the chatbot side. You can&amp;#39;t chat back and forth with k8sGPT and it doesn&amp;#39;t suggest commands for you to execute, so I decided to make this. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/WGJz7QIMVXqn1xicSgYS_oF9zxuuRDy4JYelsXknBnY.jpg?auto=webp&amp;s=ecd6b5237383258ab14448da5d9c35b777c5a023",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/WGJz7QIMVXqn1xicSgYS_oF9zxuuRDy4JYelsXknBnY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=5810bce30b2689a57935e40844f494579aba7907",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/WGJz7QIMVXqn1xicSgYS_oF9zxuuRDy4JYelsXknBnY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b04c7ead30829d75a13ad3c721c4658dbaab9818",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/WGJz7QIMVXqn1xicSgYS_oF9zxuuRDy4JYelsXknBnY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b8ed980303a9d03ac10d4599b971c1b89d80ff06",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/WGJz7QIMVXqn1xicSgYS_oF9zxuuRDy4JYelsXknBnY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ed5c1cd76395ecd9b5fb52f72b08b0181e0bbcf5",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/WGJz7QIMVXqn1xicSgYS_oF9zxuuRDy4JYelsXknBnY.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9b676ecc36dee5ad771aebb366e101726a725a56",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/WGJz7QIMVXqn1xicSgYS_oF9zxuuRDy4JYelsXknBnY.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=592f834ad64f3b5d06522586598277c025e85ea7",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "1kLiwzY-2jm6TWJ5ftGO-MbvU6Kpv8Hfr-Dk1buhBKI"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1cij4mp",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "Wild_Plantain528",
			"discussion_type": null,
			"num_comments": 7,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cij4mp/k8sai_my_opensource_gpt_cli_tool_for_kubernetes/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cij4mp/k8sai_my_opensource_gpt_cli_tool_for_kubernetes/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714665158,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "[GitHub](https://github.com/yousefabuz17/PkgInspect)\n\n# What My Project Does\n\n`PkgInspect` is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease.\n\n\n\n# Target Audience\n\nDevelopers and Python enthusiasts looking to streamline the process of inspecting Python packages, comparing versions, and extracting vital information from Python installations will find `PkgInspect` invaluable. Many current modules such as `importlib_metadata` and `pkg_resources` are fairly limited on what items can be inspected and retrieved for a specified python package. Also noticed `pkg_resources` has also deprecated some of its important retrieval methods.\n\n\n\n# Comparison\n\n`PkgInspect` stands out from other Python package inspection tools due to its robust features. Unlike traditional methods that require manual inspection and comparison, `PkgInspect` automates the process, saving developers valuable time and effort. With `PkgInspect`, you can effortlessly retrieve package information, compare versions across different Python installations, and extract crucial details with just a few simple commands.\n\n\n\n# Key Features\n\n* **Inspect Packages**: Retrieve comprehensive information about installed Python packages.\n* **Compare Versions**: Seamlessly compare package data across different Python versions.\n* **Retrieve Installed Pythons**: Identify and list installed Python versions effortlessly.\n* **Inspect PyPI Packages**: Gather detailed information about packages from the Python Package Index (PyPI).\n* **Fetch Available Updates**: Stay up-to-date with available updates for a package from the current version.\n* **List Inspection Fieldnames**: Access a list of available fieldnames for package inspection.\n* **Retrieve Package Metrics**: Extract OS statistics about a package effortlessly.\n* **Fetch GitHub Statistics**: Retrieve insightful statistics about a package from GitHub effortlessly.\n* **Retrieve all Python Packages**: Easily list all installed Python packages for a given Python version.\n\n  \nMain Components\n\n**Core Modules**\n\n- `PkgInspect`: Inspects Python packages and retrieves package information.  \n- `PkgVersions`: Retrieves and compares package data across different Python versions.  \n- `PkgMetrics`: Extracts OS statistics about a package.\n\n  \n**Functions**  \n- `inspect_package`: Inspects a Python package and retrieves package information.  \n- `inspect_pypi`: Inspects a package from the Python Package Index (PyPI).  \n- `get_available_updates`: Fetches available updates for a package from the current version.  \n- `get_installed_pythons`: Identifies and lists installed Python versions.  \n- `get_version_packages`: Lists all installed Python packages for a given Python version.  \n- `pkg_version_compare`: Compares package data across different Python versions.\n\n\n\n# Inspection Field Options\n\n***Any other field name will be treated as a file name to inspect from the packages' site-path directory.***\n\n    - `short_meta` (dict[str, Any]): Returns a dictionary of the most important metadata fields.\n        - If only one field is needed, you can use any of the following metadata fields.\n        - Possible Fields instead of `short_meta`:\n            - `Metadata-Version` (PackageVersion)\n            - `Name` (str)\n            - `Summary` (str)\n            - `Author-email` (str)\n            - `Home-page` (str)\n            - `Download-URL` (str)\n            - `Platform(s)` (set)\n            - `Author` (str)\n            - `Classifier(s)` (set)\n            - `Description-Content-Type` (str)\n    - `short_license` (str): Returns the name of the license being used.\n    - `metadata` (str): Returns the contents of the METADATA file.\n    - `installer` (str): Returns the installer tool used for installation.\n    - `license` (str): Returns the contents of the LICENSE file.\n    - `record` (str): Returns the list of installed files.\n    - `wheel` (str): Returns information about the Wheel distribution format.\n    - `requested` (str): Returns information about the requested installation.\n    - `authors` (str): Returns the contents of the AUTHORS.md file.\n    - `entry_points` (str): Returns the contents of the entry_points.txt file.\n    - `top_level` (str): Returns the contents of the top_level.txt file.\n    - `source_file` (str): Returns the source file path for the specified package.\n    - `source_code` (str): Returns the source code contents for the specified package.\n    - `doc` (str): Returns the documentation for the specified package.\n    \n    - `Pkg` Custom Class Fields\n        - `PkgInspect fields`: Possible Fields from the `PkgInspect` class.\n            - `site_path` (Path): Returns the site path of the package.\n            - `package_paths` (Iterable[Path]): Returns the package paths of the package.\n            - `package_versions` (Generator[tuple[str, tuple[tuple[Any, str]]]]): Returns the package versions of the package.\n            - `pyversions` (tuple[Path]): Returns the Python versions of the package.\n            - `installed_pythons` (TupleOfPkgVersions): Returns the installed Python versions of the package.\n            - `site_packages` (Iterable[str]): Returns the site packages of the package.\n            - `islatest_version` (bool): Returns True if the package is the latest version.\n            - `isinstalled_version` (bool): Returns True if the package is the installed version.\n            - `installed_version` (PackageVersion): Returns the installed version of the package.\n            - `available_updates` (TupleOfPkgVersions): Returns the available updates of the package.\n    \n        - `PkgVersions fields`: Possible Fields from the `PkgVersions` class.\n            - `initial_version` (PackageVersion): Returns the initial version of the package.\n            - `installed_version` (PackageVersion): Returns the installed version of the package.\n            - `latest_version` (PackageVersion): Returns the latest version of the package.\n            - `total_versions` (int): Returns the total number of versions of the package.\n            - `version_history` (TupleOfPkgVersions): Returns the version history of the specified package.\n            - `package_url`: Returns the URL of the package on PyPI.\n            - `github_stats_url` (str): Returns the GitHub statistics URL of the package.\n            - `github_stats` (dict[str, Any]): Returns the GitHub statistics of the package.\n                - The GitHub statistics are returned as a dictionary \\\n                    containing the following fields which can accessed using the `item` parameter:\n                    - `Forks` (int): Returns the number of forks on GitHub.\n                    - `Stars` (int): Returns the number of stars on GitHub.\n                    - `Watchers` (int): Returns the number of watchers on GitHub.\n                    - `Contributors` (int): Returns the number of contributors on GitHub.\n                    - `Dependencies` (int): Returns the number of dependencies on GitHub.\n                    - `Dependent repositories` (int): Returns the number of dependent repositories on GitHub.\n                    - `Dependent packages` (int): Returns the number of dependent packages on GitHub.\n                    - `Repository size` (NamedTuple): Returns the size of the repository on GitHub.\n                    - `SourceRank` (int): Returns the SourceRank of the package on GitHub.\n                    - `Total releases` (int): Returns the total number of releases on GitHub.\n        \n        - `PkgMetrics fields`: Possible Fields from the `PkgMetrics` class.\n            - `all_metric_stats` (dict[str, Any]): Returns all the OS statistics of the package.\n            - `total_size` (int): Returns the total size of the package.\n            - `date_installed` (datetime): Returns the date the package was installed.\n    \n    - `pypistats fields`: Possible Fields from the `pypistats` module.\n        - `all-pypi-stats` (dict[str, Any]): Returns all the statistics of the package on PyPI into a single dictionary.\n        - `stats-overall` (dict[str, Any]): Returns the overall statistics of the package on PyPI.\n        - `stats-major` (dict[str, Any]): Returns the major version statistics of the package on PyPI.\n        - `stats-minor` (dict[str, Any]): Returns the minor version statistics of the package on PyPI.\n        - `stats-recent` (dict[str, Any]): Returns the recent statistics of the package on PyPI.\n        - `stats-system` (dict[str, Any]): Returns the system statistics of the package on PyPI.\n\n\n\n# Downsides &amp; Limitations\n\n**My algorithms are fairly well but do come with some important downsides.**\n\n* `PkgInspect` will ONLY inspect packages that are python files or contains a `dist-info` folder in the site-packages folder for a given Python version. Was not able to efficiently figure out a way to retrieve all necessary packages without containing unrelevant folders/files. Some personal packages may be skipped otherwise.\n* Beta (pre-releases) has not been implemented yet.\n* As many files may be handled, the runtime may be slow for some users. \n* The demand for a project like this is not so much in-demand but have noticed many people, including my self, still seeking for a project like this. However, this type of project does seem to exceed my experience level with Python and algorithms (hence the downsides) so not entirely sure how far this project may come in the future. Was hoping for it to be GUI based if possible.\n\n\n\n# Usage Examples\n\n    from pkg_inspect import inspect_package\n    \n    inspect_package(\"pkg_inspect\", itemOrfile=\"initial_version\")\n    # Output (Format - DateTimeAndVersion):\n    ('May 02, 2024', '0.1.0')\n    \n    \n    inspect_package(\"pkg_inspect\", itemOrfile=\"version_history\")\n    # Output (Format - tuple[DateTimeAndVersion]):\n    (('May 02, 2024', '0.1.2'), ('May 02, 2024', '0.1.1'), ('May 02, 2024', '0.1.0'))\n    \n    \n    inspect_package(\"pkg_inspect\", pyversion=\"3.12\", itemOrfile=\"short_meta\")\n    # Output (Format dict[str, Any]):\n    {'Author': 'Yousef Abuzahrieh',\n     'Author-email': 'yousefzahrieh17@gmail.com',\n     'Classifiers': {'Development Status 4 Beta',\n                     'Intended Audience Developers',\n                     'License OSI Approved Apache Software License',\n                     'Operating System OS Independent',\n                     'Programming Language Python 3',\n                     'Programming Language Python 3 Only',\n                     'Topic Utilities'},\n     'Description-Content-Type': 'text/markdown',\n     'Download-URL': 'https://github.com/yousefabuz17/PkgInspect.git',\n     'Home-page': 'https://github.com/yousefabuz17/PkgInspect',\n     'License': 'Apache Software License',\n     'Metadata-Version': &lt;Version('2.1')&gt;,\n     'Name': 'pkg-inspect',\n     'Platforms': {'Windows', 'MacOS', 'Linux'},\n     'Summary': 'A comprehensive tools to inspect Python packages and Python '\n                'installations.'}\n    \n    \n    inspect_package(\"pandas\", pyversion=\"3.12\", itemOrfile=\"github_stats\")\n    # Output (Format - dict[str, Any]):\n    {'Contributors': '1.09K',\n     'Dependencies': 3,\n     'Dependent packages': '41.3K',\n     'Dependent repositories': '38.4K',\n     'Forks': '17.3K',\n     'Repository size': Stats(symbolic='338.000 KB (Kilobytes)', calculated_size=338.0, bytes_size=346112.0),\n     'SourceRank': 32,\n     'Stars': '41.9K',\n     'Total releases': 126,\n     'Watchers': 1116}",
			"author_fullname": "t2_rr62q53rj",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "PkgInspect - Inspect Local/External Python Packages",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ci4zd5",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.74,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 4,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 4,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714618342,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/yousefabuz17/PkgInspect\"&gt;GitHub&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;&lt;code&gt;PkgInspect&lt;/code&gt; is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Developers and Python enthusiasts looking to streamline the process of inspecting Python packages, comparing versions, and extracting vital information from Python installations will find &lt;code&gt;PkgInspect&lt;/code&gt; invaluable. Many current modules such as &lt;code&gt;importlib_metadata&lt;/code&gt; and &lt;code&gt;pkg_resources&lt;/code&gt; are fairly limited on what items can be inspected and retrieved for a specified python package. Also noticed &lt;code&gt;pkg_resources&lt;/code&gt; has also deprecated some of its important retrieval methods.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;&lt;code&gt;PkgInspect&lt;/code&gt; stands out from other Python package inspection tools due to its robust features. Unlike traditional methods that require manual inspection and comparison, &lt;code&gt;PkgInspect&lt;/code&gt; automates the process, saving developers valuable time and effort. With &lt;code&gt;PkgInspect&lt;/code&gt;, you can effortlessly retrieve package information, compare versions across different Python installations, and extract crucial details with just a few simple commands.&lt;/p&gt;\n\n&lt;h1&gt;Key Features&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Inspect Packages&lt;/strong&gt;: Retrieve comprehensive information about installed Python packages.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Compare Versions&lt;/strong&gt;: Seamlessly compare package data across different Python versions.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Retrieve Installed Pythons&lt;/strong&gt;: Identify and list installed Python versions effortlessly.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inspect PyPI Packages&lt;/strong&gt;: Gather detailed information about packages from the Python Package Index (PyPI).&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Fetch Available Updates&lt;/strong&gt;: Stay up-to-date with available updates for a package from the current version.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;List Inspection Fieldnames&lt;/strong&gt;: Access a list of available fieldnames for package inspection.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Retrieve Package Metrics&lt;/strong&gt;: Extract OS statistics about a package effortlessly.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Fetch GitHub Statistics&lt;/strong&gt;: Retrieve insightful statistics about a package from GitHub effortlessly.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Retrieve all Python Packages&lt;/strong&gt;: Easily list all installed Python packages for a given Python version.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Main Components&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Core Modules&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;PkgInspect&lt;/code&gt;: Inspects Python packages and retrieves package information.&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;PkgVersions&lt;/code&gt;: Retrieves and compares package data across different Python versions.&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;PkgMetrics&lt;/code&gt;: Extracts OS statistics about a package.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;br/&gt;\n- &lt;code&gt;inspect_package&lt;/code&gt;: Inspects a Python package and retrieves package information.&lt;br/&gt;\n- &lt;code&gt;inspect_pypi&lt;/code&gt;: Inspects a package from the Python Package Index (PyPI).&lt;br/&gt;\n- &lt;code&gt;get_available_updates&lt;/code&gt;: Fetches available updates for a package from the current version.&lt;br/&gt;\n- &lt;code&gt;get_installed_pythons&lt;/code&gt;: Identifies and lists installed Python versions.&lt;br/&gt;\n- &lt;code&gt;get_version_packages&lt;/code&gt;: Lists all installed Python packages for a given Python version.&lt;br/&gt;\n- &lt;code&gt;pkg_version_compare&lt;/code&gt;: Compares package data across different Python versions.&lt;/p&gt;\n\n&lt;h1&gt;Inspection Field Options&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Any other field name will be treated as a file name to inspect from the packages&amp;#39; site-path directory.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;- `short_meta` (dict[str, Any]): Returns a dictionary of the most important metadata fields.\n    - If only one field is needed, you can use any of the following metadata fields.\n    - Possible Fields instead of `short_meta`:\n        - `Metadata-Version` (PackageVersion)\n        - `Name` (str)\n        - `Summary` (str)\n        - `Author-email` (str)\n        - `Home-page` (str)\n        - `Download-URL` (str)\n        - `Platform(s)` (set)\n        - `Author` (str)\n        - `Classifier(s)` (set)\n        - `Description-Content-Type` (str)\n- `short_license` (str): Returns the name of the license being used.\n- `metadata` (str): Returns the contents of the METADATA file.\n- `installer` (str): Returns the installer tool used for installation.\n- `license` (str): Returns the contents of the LICENSE file.\n- `record` (str): Returns the list of installed files.\n- `wheel` (str): Returns information about the Wheel distribution format.\n- `requested` (str): Returns information about the requested installation.\n- `authors` (str): Returns the contents of the AUTHORS.md file.\n- `entry_points` (str): Returns the contents of the entry_points.txt file.\n- `top_level` (str): Returns the contents of the top_level.txt file.\n- `source_file` (str): Returns the source file path for the specified package.\n- `source_code` (str): Returns the source code contents for the specified package.\n- `doc` (str): Returns the documentation for the specified package.\n\n- `Pkg` Custom Class Fields\n    - `PkgInspect fields`: Possible Fields from the `PkgInspect` class.\n        - `site_path` (Path): Returns the site path of the package.\n        - `package_paths` (Iterable[Path]): Returns the package paths of the package.\n        - `package_versions` (Generator[tuple[str, tuple[tuple[Any, str]]]]): Returns the package versions of the package.\n        - `pyversions` (tuple[Path]): Returns the Python versions of the package.\n        - `installed_pythons` (TupleOfPkgVersions): Returns the installed Python versions of the package.\n        - `site_packages` (Iterable[str]): Returns the site packages of the package.\n        - `islatest_version` (bool): Returns True if the package is the latest version.\n        - `isinstalled_version` (bool): Returns True if the package is the installed version.\n        - `installed_version` (PackageVersion): Returns the installed version of the package.\n        - `available_updates` (TupleOfPkgVersions): Returns the available updates of the package.\n\n    - `PkgVersions fields`: Possible Fields from the `PkgVersions` class.\n        - `initial_version` (PackageVersion): Returns the initial version of the package.\n        - `installed_version` (PackageVersion): Returns the installed version of the package.\n        - `latest_version` (PackageVersion): Returns the latest version of the package.\n        - `total_versions` (int): Returns the total number of versions of the package.\n        - `version_history` (TupleOfPkgVersions): Returns the version history of the specified package.\n        - `package_url`: Returns the URL of the package on PyPI.\n        - `github_stats_url` (str): Returns the GitHub statistics URL of the package.\n        - `github_stats` (dict[str, Any]): Returns the GitHub statistics of the package.\n            - The GitHub statistics are returned as a dictionary \\\n                containing the following fields which can accessed using the `item` parameter:\n                - `Forks` (int): Returns the number of forks on GitHub.\n                - `Stars` (int): Returns the number of stars on GitHub.\n                - `Watchers` (int): Returns the number of watchers on GitHub.\n                - `Contributors` (int): Returns the number of contributors on GitHub.\n                - `Dependencies` (int): Returns the number of dependencies on GitHub.\n                - `Dependent repositories` (int): Returns the number of dependent repositories on GitHub.\n                - `Dependent packages` (int): Returns the number of dependent packages on GitHub.\n                - `Repository size` (NamedTuple): Returns the size of the repository on GitHub.\n                - `SourceRank` (int): Returns the SourceRank of the package on GitHub.\n                - `Total releases` (int): Returns the total number of releases on GitHub.\n\n    - `PkgMetrics fields`: Possible Fields from the `PkgMetrics` class.\n        - `all_metric_stats` (dict[str, Any]): Returns all the OS statistics of the package.\n        - `total_size` (int): Returns the total size of the package.\n        - `date_installed` (datetime): Returns the date the package was installed.\n\n- `pypistats fields`: Possible Fields from the `pypistats` module.\n    - `all-pypi-stats` (dict[str, Any]): Returns all the statistics of the package on PyPI into a single dictionary.\n    - `stats-overall` (dict[str, Any]): Returns the overall statistics of the package on PyPI.\n    - `stats-major` (dict[str, Any]): Returns the major version statistics of the package on PyPI.\n    - `stats-minor` (dict[str, Any]): Returns the minor version statistics of the package on PyPI.\n    - `stats-recent` (dict[str, Any]): Returns the recent statistics of the package on PyPI.\n    - `stats-system` (dict[str, Any]): Returns the system statistics of the package on PyPI.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Downsides &amp;amp; Limitations&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;My algorithms are fairly well but do come with some important downsides.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;PkgInspect&lt;/code&gt; will ONLY inspect packages that are python files or contains a &lt;code&gt;dist-info&lt;/code&gt; folder in the site-packages folder for a given Python version. Was not able to efficiently figure out a way to retrieve all necessary packages without containing unrelevant folders/files. Some personal packages may be skipped otherwise.&lt;/li&gt;\n&lt;li&gt;Beta (pre-releases) has not been implemented yet.&lt;/li&gt;\n&lt;li&gt;As many files may be handled, the runtime may be slow for some users. &lt;/li&gt;\n&lt;li&gt;The demand for a project like this is not so much in-demand but have noticed many people, including my self, still seeking for a project like this. However, this type of project does seem to exceed my experience level with Python and algorithms (hence the downsides) so not entirely sure how far this project may come in the future. Was hoping for it to be GUI based if possible.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Usage Examples&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;from pkg_inspect import inspect_package\n\ninspect_package(&amp;quot;pkg_inspect&amp;quot;, itemOrfile=&amp;quot;initial_version&amp;quot;)\n# Output (Format - DateTimeAndVersion):\n(&amp;#39;May 02, 2024&amp;#39;, &amp;#39;0.1.0&amp;#39;)\n\n\ninspect_package(&amp;quot;pkg_inspect&amp;quot;, itemOrfile=&amp;quot;version_history&amp;quot;)\n# Output (Format - tuple[DateTimeAndVersion]):\n((&amp;#39;May 02, 2024&amp;#39;, &amp;#39;0.1.2&amp;#39;), (&amp;#39;May 02, 2024&amp;#39;, &amp;#39;0.1.1&amp;#39;), (&amp;#39;May 02, 2024&amp;#39;, &amp;#39;0.1.0&amp;#39;))\n\n\ninspect_package(&amp;quot;pkg_inspect&amp;quot;, pyversion=&amp;quot;3.12&amp;quot;, itemOrfile=&amp;quot;short_meta&amp;quot;)\n# Output (Format dict[str, Any]):\n{&amp;#39;Author&amp;#39;: &amp;#39;Yousef Abuzahrieh&amp;#39;,\n &amp;#39;Author-email&amp;#39;: &amp;#39;yousefzahrieh17@gmail.com&amp;#39;,\n &amp;#39;Classifiers&amp;#39;: {&amp;#39;Development Status 4 Beta&amp;#39;,\n                 &amp;#39;Intended Audience Developers&amp;#39;,\n                 &amp;#39;License OSI Approved Apache Software License&amp;#39;,\n                 &amp;#39;Operating System OS Independent&amp;#39;,\n                 &amp;#39;Programming Language Python 3&amp;#39;,\n                 &amp;#39;Programming Language Python 3 Only&amp;#39;,\n                 &amp;#39;Topic Utilities&amp;#39;},\n &amp;#39;Description-Content-Type&amp;#39;: &amp;#39;text/markdown&amp;#39;,\n &amp;#39;Download-URL&amp;#39;: &amp;#39;https://github.com/yousefabuz17/PkgInspect.git&amp;#39;,\n &amp;#39;Home-page&amp;#39;: &amp;#39;https://github.com/yousefabuz17/PkgInspect&amp;#39;,\n &amp;#39;License&amp;#39;: &amp;#39;Apache Software License&amp;#39;,\n &amp;#39;Metadata-Version&amp;#39;: &amp;lt;Version(&amp;#39;2.1&amp;#39;)&amp;gt;,\n &amp;#39;Name&amp;#39;: &amp;#39;pkg-inspect&amp;#39;,\n &amp;#39;Platforms&amp;#39;: {&amp;#39;Windows&amp;#39;, &amp;#39;MacOS&amp;#39;, &amp;#39;Linux&amp;#39;},\n &amp;#39;Summary&amp;#39;: &amp;#39;A comprehensive tools to inspect Python packages and Python &amp;#39;\n            &amp;#39;installations.&amp;#39;}\n\n\ninspect_package(&amp;quot;pandas&amp;quot;, pyversion=&amp;quot;3.12&amp;quot;, itemOrfile=&amp;quot;github_stats&amp;quot;)\n# Output (Format - dict[str, Any]):\n{&amp;#39;Contributors&amp;#39;: &amp;#39;1.09K&amp;#39;,\n &amp;#39;Dependencies&amp;#39;: 3,\n &amp;#39;Dependent packages&amp;#39;: &amp;#39;41.3K&amp;#39;,\n &amp;#39;Dependent repositories&amp;#39;: &amp;#39;38.4K&amp;#39;,\n &amp;#39;Forks&amp;#39;: &amp;#39;17.3K&amp;#39;,\n &amp;#39;Repository size&amp;#39;: Stats(symbolic=&amp;#39;338.000 KB (Kilobytes)&amp;#39;, calculated_size=338.0, bytes_size=346112.0),\n &amp;#39;SourceRank&amp;#39;: 32,\n &amp;#39;Stars&amp;#39;: &amp;#39;41.9K&amp;#39;,\n &amp;#39;Total releases&amp;#39;: 126,\n &amp;#39;Watchers&amp;#39;: 1116}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/SIRC-hBFw0NmjNEhPYqSVlclYh8F38fZ-8AknUZq6pQ.jpg?auto=webp&amp;s=dba18697bff92a82426475c1991aff7c04095b91",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/SIRC-hBFw0NmjNEhPYqSVlclYh8F38fZ-8AknUZq6pQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=ae9f1c45fd29d4d63bda6e085dfc14b5a795080e",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/SIRC-hBFw0NmjNEhPYqSVlclYh8F38fZ-8AknUZq6pQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=71c280798823e2fcefc3a822e1ef71833eb0ac5d",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/SIRC-hBFw0NmjNEhPYqSVlclYh8F38fZ-8AknUZq6pQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=268449417a2d9eafe5619f1780adec1c183d6412",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/SIRC-hBFw0NmjNEhPYqSVlclYh8F38fZ-8AknUZq6pQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=746f2f28c5361f7714f76786b99b0782ea69383e",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/SIRC-hBFw0NmjNEhPYqSVlclYh8F38fZ-8AknUZq6pQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=b67b9ac9e339cd4b8ad30932ff3096632fbcaf3d",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/SIRC-hBFw0NmjNEhPYqSVlclYh8F38fZ-8AknUZq6pQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=c407624a5effbb0b0bdc428d1d540f343802fd88",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "GWjcC04HqT1CP-lagkjC0hXX8y6QFDJ3iNd1JiOtzqs"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1ci4zd5",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "yousefabuz",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ci4zd5/pkginspect_inspect_localexternal_python_packages/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ci4zd5/pkginspect_inspect_localexternal_python_packages/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714618342,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Can you guys suggest some very good book for GUI development in Python? \n\nI'm currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support.",
			"author_fullname": "t2_8awt38yt",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Best book for GUI development in Python",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Resource"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "resource",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1chdeym",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.83,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 67,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Resource",
			"can_mod_post": false,
			"score": 67,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714538181,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Can you guys suggest some very good book for GUI development in Python? &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ddbd37",
			"id": "1chdeym",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "Bekhyam",
			"discussion_type": null,
			"num_comments": 56,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1chdeym/best_book_for_gui_development_in_python/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1chdeym/best_book_for_gui_development_in_python/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714538181,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "**What My Project Does**\n\nI'm making a simple configclass for handling configuration in smaller projects and scripts. Goal is to be as simple to start with as creating a dataclass.\n\nThe module itself works off dataclass and when you use it you just define a dataclass as normal, but decorate it with @configclass() instead.\n\nExample:\n\n    from configclass import configclass\n\n    @configclass()\n    class Settings:\n        foo: bool = False\n        url: str = \"\"\n        footoo: bool = True\n        my_model: str = \"model.pt\"\n\n    setting = Settings.load()\n\n    print(setting.foo, setting.footoo, setting.my_model)\n\nFrom that you got\n\n* JSON config file support (config.json)\n* YAML config file support (config.yaml)\n* Command line support (argparse)\n* Env variables support (CONFIG_SETTINGNAME)\n\nIt also support nested structures via nested dataclass classes.\n\n**Comparison**\n\nIt's meant as a quick and lightweight alternative to larger and more comprehensive config systems, for the small programs and scripts where you'd just use a dataclass, and maybe load the values from a config file.\n\n**Target Audience**\n\nSince it's pretty new and raw I wouldn't recommend it for heavy production settings or complex projects. That said, it should work fine for most cases.\n\nWhile I've worked with python for quite some time, this is the first time I've tried making a package, so I'd like some feedback on the project and it's structure before I push it anywhere. It'd also be nice to stress test it and shake out some bugs.\n\nMore info and code at https://github.com/TheTerrasque/python-configclass",
			"author_fullname": "t2_9uv8v",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "ConfigClass - simple dataclass inspired configuration",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1chhm8x",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.87,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 22,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 22,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": 1714563840,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714554716,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m making a simple configclass for handling configuration in smaller projects and scripts. Goal is to be as simple to start with as creating a dataclass.&lt;/p&gt;\n\n&lt;p&gt;The module itself works off dataclass and when you use it you just define a dataclass as normal, but decorate it with @configclass() instead.&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from configclass import configclass\n\n@configclass()\nclass Settings:\n    foo: bool = False\n    url: str = &amp;quot;&amp;quot;\n    footoo: bool = True\n    my_model: str = &amp;quot;model.pt&amp;quot;\n\nsetting = Settings.load()\n\nprint(setting.foo, setting.footoo, setting.my_model)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From that you got&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;JSON config file support (config.json)&lt;/li&gt;\n&lt;li&gt;YAML config file support (config.yaml)&lt;/li&gt;\n&lt;li&gt;Command line support (argparse)&lt;/li&gt;\n&lt;li&gt;Env variables support (CONFIG_SETTINGNAME)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It also support nested structures via nested dataclass classes.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s meant as a quick and lightweight alternative to larger and more comprehensive config systems, for the small programs and scripts where you&amp;#39;d just use a dataclass, and maybe load the values from a config file.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Since it&amp;#39;s pretty new and raw I wouldn&amp;#39;t recommend it for heavy production settings or complex projects. That said, it should work fine for most cases.&lt;/p&gt;\n\n&lt;p&gt;While I&amp;#39;ve worked with python for quite some time, this is the first time I&amp;#39;ve tried making a package, so I&amp;#39;d like some feedback on the project and it&amp;#39;s structure before I push it anywhere. It&amp;#39;d also be nice to stress test it and shake out some bugs.&lt;/p&gt;\n\n&lt;p&gt;More info and code at &lt;a href=\"https://github.com/TheTerrasque/python-configclass\"&gt;https://github.com/TheTerrasque/python-configclass&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/9qZiCt7iMHZ4hDgs_a4c05mHIdom2RCtP_zZUILmsUU.jpg?auto=webp&amp;s=225b29efc7f0c25bb009efb8241ebc7571b94719",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/9qZiCt7iMHZ4hDgs_a4c05mHIdom2RCtP_zZUILmsUU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=4827d637e8be39f784cb2e1a454accb25faf6091",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/9qZiCt7iMHZ4hDgs_a4c05mHIdom2RCtP_zZUILmsUU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=356bd2b8719d7710c188d1bb980ccb90ecd00934",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/9qZiCt7iMHZ4hDgs_a4c05mHIdom2RCtP_zZUILmsUU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=f959b6bb56869a20200d5bd19423b22fdeb66994",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/9qZiCt7iMHZ4hDgs_a4c05mHIdom2RCtP_zZUILmsUU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=0f506d0a4934000a0921a8d52bc2564a68136f69",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/9qZiCt7iMHZ4hDgs_a4c05mHIdom2RCtP_zZUILmsUU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=db43900e1319b778c1760f1712fe048cd671eb6f",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/9qZiCt7iMHZ4hDgs_a4c05mHIdom2RCtP_zZUILmsUU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f3dd124688bdd8b164105a546956c4a6084f0733",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "dbP3Mey8Y180kU5D-vpLg48o0i-kDMxprHUsFpCrQ0Q"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1chhm8x",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "TheTerrasque",
			"discussion_type": null,
			"num_comments": 5,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1chhm8x/configclass_simple_dataclass_inspired/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1chhm8x/configclass_simple_dataclass_inspired/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714554716,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): \n\n*The sign ups are all used up, but you can still watch all the videos for free. Read below!\n\nhttps://udemy.com/course/automate/?couponCode=MAY2024FREE\n\nhttps://udemy.com/course/automate/?couponCode=MAY2024FREE2\n\nIf you are reading this after the sign ups are used up, you can always find [the first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&amp;list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW) YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have \"preview\" turned on. Scroll down to find and click \"Expand All Sections\" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos.\n\n**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**\n\n**I'm also working on another Udemy course** that follows my recent book \"Beyond the Basic Stuff with Python\". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&amp;list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&amp;index=1)\n\n**Frequently Asked Questions:** (*read this before posting questions*)\n\n* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.\n* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.\n* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com\n* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/\n* I do plan on updating the Udemy course, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.\n* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.\n* **You're not too old to learn to code. You don't need to be \"good at math\" to be good at coding.**\n* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a \"gym buddy\" to learn with. Check out /r/ProgrammingBuddies",
			"author_fullname": "t2_369qx",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "2,000 free sign ups available for the \"Automate the Boring Stuff with Python\" online course. (May 20",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Resource"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "resource",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1chqnff",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.72,
			"author_flair_background_color": "",
			"subreddit_type": "public",
			"ups": 3,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Resource",
			"can_mod_post": false,
			"score": 3,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": "",
			"author_flair_richtext": [
			  {
				"e": "text",
				"t": "Author of \"Automate the Boring Stuff\""
			  }
			],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714581454,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "richtext",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;If you want to learn to code, I&amp;#39;ve released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): &lt;/p&gt;\n\n&lt;p&gt;*The sign ups are all used up, but you can still watch all the videos for free. Read below!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://udemy.com/course/automate/?couponCode=MAY2024FREE\"&gt;https://udemy.com/course/automate/?couponCode=MAY2024FREE&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://udemy.com/course/automate/?couponCode=MAY2024FREE2\"&gt;https://udemy.com/course/automate/?couponCode=MAY2024FREE2&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you are reading this after the sign ups are used up, you can always find &lt;a href=\"https://www.youtube.com/watch?v=1F_OgqRuSdI&amp;amp;list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW\"&gt;the first 15 of the course&amp;#39;s 50 videos are free on YouTube if you want to preview them.&lt;/a&gt; YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have &amp;quot;preview&amp;quot; turned on. Scroll down to find and click &amp;quot;Expand All Sections&amp;quot; and then click the preview link. You won&amp;#39;t have access to the forums and other materials, but you can watch the videos.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE: Be sure to BUY the course for $0, and not sign up for Udemy&amp;#39;s subscription plan. The subscription plan is free for the first seven days and then they charge you. It&amp;#39;s selected by default. If you are on a laptop and can&amp;#39;t click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;I&amp;#39;m also working on another Udemy course&lt;/strong&gt; that follows my recent book &amp;quot;Beyond the Basic Stuff with Python&amp;quot;. So far I have &lt;a href=\"https://www.youtube.com/watch?v=kSrnLbioN6w&amp;amp;list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&amp;amp;index=1\"&gt;the first 15 of the planned 56 videos done. You can watch them for free on YouTube.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Frequently Asked Questions:&lt;/strong&gt; (&lt;em&gt;read this before posting questions&lt;/em&gt;)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.&lt;/li&gt;\n&lt;li&gt;If you don&amp;#39;t have time to take the course now, that&amp;#39;s fine. Signing up gives you lifetime access so you can work on it at your own pace.&lt;/li&gt;\n&lt;li&gt;This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at &lt;a href=\"https://inventwithpython.com\"&gt;https://inventwithpython.com&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;The 2nd edition of Automate the Boring Stuff with Python is free online: &lt;a href=\"https://automatetheboringstuff.com/2e/\"&gt;https://automatetheboringstuff.com/2e/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;I do plan on updating the Udemy course, but it&amp;#39;ll take a while because I have other book projects I&amp;#39;m working on. If you sign up for this Udemy course, you&amp;#39;ll get the updated content automatically once I finish it. It won&amp;#39;t be a separate course.&lt;/li&gt;\n&lt;li&gt;It&amp;#39;s totally fine to start on the first edition and then read the second edition later. I&amp;#39;ll be writing a blog post to guide first edition readers to the parts of the second edition they should read.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;You&amp;#39;re not too old to learn to code. You don&amp;#39;t need to be &amp;quot;good at math&amp;quot; to be good at coding.&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Signing up is the first step. Actually finishing the course is the next. :) &lt;a href=\"https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F\"&gt;There are several ways to get/stay motivated.&lt;/a&gt; I suggest getting a &amp;quot;gym buddy&amp;quot; to learn with. Check out &lt;a href=\"/r/ProgrammingBuddies\"&gt;/r/ProgrammingBuddies&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": "Author of \"Automate the Boring Stuff\"",
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ddbd37",
			"id": "1chqnff",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "AlSweigart",
			"discussion_type": null,
			"num_comments": 2,
			"send_replies": false,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": "dark",
			"permalink": "/r/Python/comments/1chqnff/2000_free_sign_ups_available_for_the_automate_the/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1chqnff/2000_free_sign_ups_available_for_the_automate_the/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714581454,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "https://github.com/Never-Over/tach\n\n**What My Project Does**\n\n`tach` is a lightweight Python tool that enforces boundaries and dependencies in your Python project. Inspired by `nx`, `tach` helps you maintain a decoupled and modular Python codebase.\n\nAn earlier version of this tool was called modguard, which we shared [here](https://www.reddit.com/r/Python/comments/1aqtjyx/modguard_a_lightweight_python_tool_for_enforcing/).\n\n\nBy default, Python allows you to import and use anything, anywhere. Over time, this results in modules that were intended to be separate getting tightly coupled together, and domain boundaries breaking down. We experienced this first-hand at a unicorn startup, where the eng team paused development for over a year in an attempt to split up packages into independent services. This attempt ultimately failed.\n\nThis problem occurs because:\n- It's much easier to add to an existing package rather than create a new one\n\n- Junior devs have a limited understanding of the existing architecture\n\n- External pressure leading to shortcuts and overlooking best practices\n\n\nEfforts we've seen to fix this problem always came up short. A patchwork of solutions would attempt to solve this from different angles, such as developer education, CODEOWNERs, standard guides, refactors, and more. However, none of these addressed the root cause.\n\nWith `tach`, you can:\n\n1. Declare your packages (`package.yml`)\n\n2. Define dependencies between packages (`tach.yml`)\n\n3. Enforce those dependencies (`tach check`)\n\n\nYou can also enforce a strict interface for each package. This means that only imports that are directly listed in `__init__.py` can be imported by other packages.\n\n\n`tach` is:\n\n- fully open source\n\n- able to be adopted incrementally (`tach init` and `tach add`)\n\n- implemented with no runtime footprint\n\n- interoperable with your existing tooling\n\n\nWe hope you give it a try! We'd love any feedback.\n\n[GitHub](https://github.com/Never-Over/tach)\n\n\n**Target Audience**\n\nPython developers who want to maintain quality while shipping quickly\n\n**Comparison**\n\nThis tool is an evolution of a tool we previously built, [modguard](https://www.reddit.com/r/Python/comments/1aqtjyx/modguard_a_lightweight_python_tool_for_enforcing/). It's very similar to [`nx`'s](https://nx.dev/features/enforce-module-boundaries) module boundaries tool, although they don't support Python.",
			"author_fullname": "t2_jtyw9",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "tach - a Python tool to enforce modular design",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cgsopt",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.93,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 132,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 132,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714483223,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/Never-Over/tach\"&gt;https://github.com/Never-Over/tach&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;tach&lt;/code&gt; is a lightweight Python tool that enforces boundaries and dependencies in your Python project. Inspired by &lt;code&gt;nx&lt;/code&gt;, &lt;code&gt;tach&lt;/code&gt; helps you maintain a decoupled and modular Python codebase.&lt;/p&gt;\n\n&lt;p&gt;An earlier version of this tool was called modguard, which we shared &lt;a href=\"https://www.reddit.com/r/Python/comments/1aqtjyx/modguard_a_lightweight_python_tool_for_enforcing/\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;By default, Python allows you to import and use anything, anywhere. Over time, this results in modules that were intended to be separate getting tightly coupled together, and domain boundaries breaking down. We experienced this first-hand at a unicorn startup, where the eng team paused development for over a year in an attempt to split up packages into independent services. This attempt ultimately failed.&lt;/p&gt;\n\n&lt;p&gt;This problem occurs because:\n- It&amp;#39;s much easier to add to an existing package rather than create a new one&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Junior devs have a limited understanding of the existing architecture&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;External pressure leading to shortcuts and overlooking best practices&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Efforts we&amp;#39;ve seen to fix this problem always came up short. A patchwork of solutions would attempt to solve this from different angles, such as developer education, CODEOWNERs, standard guides, refactors, and more. However, none of these addressed the root cause.&lt;/p&gt;\n\n&lt;p&gt;With &lt;code&gt;tach&lt;/code&gt;, you can:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Declare your packages (&lt;code&gt;package.yml&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Define dependencies between packages (&lt;code&gt;tach.yml&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Enforce those dependencies (&lt;code&gt;tach check&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can also enforce a strict interface for each package. This means that only imports that are directly listed in &lt;code&gt;__init__.py&lt;/code&gt; can be imported by other packages.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;tach&lt;/code&gt; is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;fully open source&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;able to be adopted incrementally (&lt;code&gt;tach init&lt;/code&gt; and &lt;code&gt;tach add&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;implemented with no runtime footprint&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;interoperable with your existing tooling&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;We hope you give it a try! We&amp;#39;d love any feedback.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Never-Over/tach\"&gt;GitHub&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Python developers who want to maintain quality while shipping quickly&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This tool is an evolution of a tool we previously built, &lt;a href=\"https://www.reddit.com/r/Python/comments/1aqtjyx/modguard_a_lightweight_python_tool_for_enforcing/\"&gt;modguard&lt;/a&gt;. It&amp;#39;s very similar to &lt;a href=\"https://nx.dev/features/enforce-module-boundaries\"&gt;&lt;code&gt;nx&lt;/code&gt;&amp;#39;s&lt;/a&gt; module boundaries tool, although they don&amp;#39;t support Python.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/Lf2GYMGECcJZF3FCUFCZ9LTTpv_MhuRa0jb2SVUeN4A.jpg?auto=webp&amp;s=64e1d6dfa9a6b92c0aa2e8a6e140a98b041524e4",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/Lf2GYMGECcJZF3FCUFCZ9LTTpv_MhuRa0jb2SVUeN4A.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=91b2600bff0554464633d02189b435a6a5a2b6fe",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/Lf2GYMGECcJZF3FCUFCZ9LTTpv_MhuRa0jb2SVUeN4A.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=12297d003e614e385373ecda5695bd9c9267f40c",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/Lf2GYMGECcJZF3FCUFCZ9LTTpv_MhuRa0jb2SVUeN4A.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=0d59d1631fe5bc420dac07794e75668a6902a02e",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/Lf2GYMGECcJZF3FCUFCZ9LTTpv_MhuRa0jb2SVUeN4A.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=2a9c8532275b3fb61ca40340ae49d67d5e99036b",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/Lf2GYMGECcJZF3FCUFCZ9LTTpv_MhuRa0jb2SVUeN4A.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=f912ff9ee65209a9673719ac9a26d5780700a11f",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/Lf2GYMGECcJZF3FCUFCZ9LTTpv_MhuRa0jb2SVUeN4A.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=2f9d41e64668f9f6db9171cea018682bc52343ab",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "THg6sV4RGwKOsxgKJfXJ1_5tQzlQziVbxAB-M5N3fzM"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1cgsopt",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "the1024",
			"discussion_type": null,
			"num_comments": 16,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cgsopt/tach_a_python_tool_to_enforce_modular_design/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cgsopt/tach_a_python_tool_to_enforce_modular_design/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714483223,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Approaching a year into my journey of learning Python (I come from a C background) I finally understand the beauty and ubiquity of the langauge. Initially, I was hesitant to learn a dynamically typed and interpreted language when job requirements required me to learn it (I help support a team of Power Systems Engineers, and our professional software uses python for scripting). My first attempts were extremely unpythonic and it felt like I was fighting the language (index based looping, declaring variables before use, C style procedural code on top of Pandas antipatterns) and the lack of brackets I found appalling. Then I had my first code review with a helpful Senior engineer. We refactored my code together and something beautiful came together. He then told me to read the Zen of Python. It was love at first \"import this\". I was hooked. Every waking moment for weeks I was learning all I could muster about python. \n\nNow later on in my journey, and having written several complex systems in python over the course of the past 6 months, it is truly incredible what you can accomplish with just the standard library. Need a temporary file? There is a module for that. Want to serialize data? Multiple modules just for that purpose. Embarrassingly parallel basic scripting tasks? 3 lines of code later and it is now multiprocessed. The list goes on and on. \n\nArchimedes once famously said \"Give me a lever long enough and a fulcrum on which to place it, and I shall move the world\". With an understanding of all that is available out of the box as the fulcrum so to speak, it is amazing the breadth of problems that the standard library proves to be a long enough lever. On our compute cluster, we try to keep dependencies to an absolute minimum. Sticking to the standard library, Pandas, and the provided API for the software with a clever enough implementation rarely if ever feels like a limitation. \n\nSo next time you feel the need to pip install something new, be sure to check the Python documentation. You just might already have all the tools you need already at your disposal! \n\n",
			"author_fullname": "t2_ezx92joj",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Just an Appreciation Post for the Python Standard Library",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cguoiy",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.93,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 46,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 46,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714488483,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Approaching a year into my journey of learning Python (I come from a C background) I finally understand the beauty and ubiquity of the langauge. Initially, I was hesitant to learn a dynamically typed and interpreted language when job requirements required me to learn it (I help support a team of Power Systems Engineers, and our professional software uses python for scripting). My first attempts were extremely unpythonic and it felt like I was fighting the language (index based looping, declaring variables before use, C style procedural code on top of Pandas antipatterns) and the lack of brackets I found appalling. Then I had my first code review with a helpful Senior engineer. We refactored my code together and something beautiful came together. He then told me to read the Zen of Python. It was love at first &amp;quot;import this&amp;quot;. I was hooked. Every waking moment for weeks I was learning all I could muster about python. &lt;/p&gt;\n\n&lt;p&gt;Now later on in my journey, and having written several complex systems in python over the course of the past 6 months, it is truly incredible what you can accomplish with just the standard library. Need a temporary file? There is a module for that. Want to serialize data? Multiple modules just for that purpose. Embarrassingly parallel basic scripting tasks? 3 lines of code later and it is now multiprocessed. The list goes on and on. &lt;/p&gt;\n\n&lt;p&gt;Archimedes once famously said &amp;quot;Give me a lever long enough and a fulcrum on which to place it, and I shall move the world&amp;quot;. With an understanding of all that is available out of the box as the fulcrum so to speak, it is amazing the breadth of problems that the standard library proves to be a long enough lever. On our compute cluster, we try to keep dependencies to an absolute minimum. Sticking to the standard library, Pandas, and the provided API for the software with a clever enough implementation rarely if ever feels like a limitation. &lt;/p&gt;\n\n&lt;p&gt;So next time you feel the need to pip install something new, be sure to check the Python documentation. You just might already have all the tools you need already at your disposal! &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1cguoiy",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "SpeakerOk1974",
			"discussion_type": null,
			"num_comments": 10,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cguoiy/just_an_appreciation_post_for_the_python_standard/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cguoiy/just_an_appreciation_post_for_the_python_standard/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714488483,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hey all! I recently made a library for sending text files over Discord DMs\n\n[https://pypi.org/project/ext-message/](https://pypi.org/project/ext-message/)\n\n[https://github.com/jwjeffr/ext-message/](https://github.com/jwjeffr/ext-message/)\n\n**What my project does**\n\nThis code is a command-line interface for sending text files to Discord DMs from a bot.\n\n**Target audience**\n\nMy personal use-case is for my research, where I run long simulations (\\~72 hours) on a computing cluster. These simulations generate log files, so I can send myself the log file after the simulation, letting me:\n\n\\- Know that the simulation is done\n\n\\- Check that the simulation ran as intended\n\nwithout having to SSH into the cluster. As of now, those running similarly heavy code looking to be notified when it finishes is my target audience, but I would love to hear other creative use cases to expand that audience!\n\n**Comparison**\n\nNot sure what's out there in terms of other libraries for doing similar things. This was partially for production and partially a toy project forcing me to become more familiar with discord.py",
			"author_fullname": "t2_116hsa",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "ext-message: Send files over Discord direct messages",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cha1qy",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.7,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 4,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 4,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714527602,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey all! I recently made a library for sending text files over Discord DMs&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pypi.org/project/ext-message/\"&gt;https://pypi.org/project/ext-message/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/jwjeffr/ext-message/\"&gt;https://github.com/jwjeffr/ext-message/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What my project does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This code is a command-line interface for sending text files to Discord DMs from a bot.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;My personal use-case is for my research, where I run long simulations (~72 hours) on a computing cluster. These simulations generate log files, so I can send myself the log file after the simulation, letting me:&lt;/p&gt;\n\n&lt;p&gt;- Know that the simulation is done&lt;/p&gt;\n\n&lt;p&gt;- Check that the simulation ran as intended&lt;/p&gt;\n\n&lt;p&gt;without having to SSH into the cluster. As of now, those running similarly heavy code looking to be notified when it finishes is my target audience, but I would love to hear other creative use cases to expand that audience!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Not sure what&amp;#39;s out there in terms of other libraries for doing similar things. This was partially for production and partially a toy project forcing me to become more familiar with discord.py&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?auto=webp&amp;s=85f19a22cbd85fa784cdb417359d8ff7cda9e394",
					"width": 300,
					"height": 300
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=46fa55dd1b1e587ab93bcbbdc6cb2de37b810bf3",
					  "width": 108,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=cfd7f76ac4c13cdc287edd9856ef0430dbc862a5",
					  "width": 216,
					  "height": 216
					}
				  ],
				  "variants": {

				  },
				  "id": "IUHM4ctLZQorzkPuYJ4IkGSag8BtaIqZoyqL1L53KuM"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1cha1qy",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "FeLoNy111",
			"discussion_type": null,
			"num_comments": 1,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cha1qy/extmessage_send_files_over_discord_direct_messages/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cha1qy/extmessage_send_files_over_discord_direct_messages/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714527602,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "# Weekly Thread: Beginner Questions üêç\n\nWelcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.\n\n## How it Works:\n\n1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!\n2. **Community Support**: Get answers and advice from the community.\n3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.\n\n## Guidelines:\n\n* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **What is the difference between a list and a tuple?**\n2. **How do I read a CSV file in Python?**\n3. **What are Python decorators and how do I use them?**\n4. **How do I install a Python package using pip?**\n5. **What is a virtual environment and why should I use one?**\n\nLet's help each other learn Python! üåü",
			"author_fullname": "t2_6l4z3",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Wednesday Daily Thread: Beginner questions",
			"link_flair_richtext": [
			  {
				"a": ":pythonLogo:",
				"e": "emoji",
				"u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
			  },
			  {
				"e": "text",
				"t": " Daily Thread"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "daily-thread",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ch7whw",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.65,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 4,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": ":pythonLogo: Daily Thread",
			"can_mod_post": false,
			"score": 4,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": true,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714521610,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Beginner Questions üêç&lt;/h1&gt;\n\n&lt;p&gt;Welcome to our Beginner Questions thread! Whether you&amp;#39;re new to Python or just looking to clarify some basics, this is the thread for you.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Anything&lt;/strong&gt;: Feel free to ask any Python-related question. There are no bad questions here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Support&lt;/strong&gt;: Get answers and advice from the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Sharing&lt;/strong&gt;: Discover tutorials, articles, and beginner-friendly resources.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is specifically for &lt;strong&gt;beginner questions&lt;/strong&gt;. For more advanced queries, check out our &lt;a href=\"#advanced-questions-thread-link\"&gt;Advanced Questions Thread&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;What is the difference between a list and a tuple?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do I read a CSV file in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are Python decorators and how do I use them?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do I install a Python package using pip?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What is a virtual environment and why should I use one?&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other learn Python! üåü&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76",
					"width": 512,
					"height": 288
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413",
					  "width": 108,
					  "height": 60
					},
					{
					  "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf",
					  "width": 216,
					  "height": 121
					},
					{
					  "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16",
					  "width": 320,
					  "height": 180
					}
				  ],
				  "variants": {

				  },
				  "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": "moderator",
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#00a6a5",
			"id": "1ch7whw",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "AutoModerator",
			"discussion_type": null,
			"num_comments": 27,
			"send_replies": false,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1ch7whw/wednesday_daily_thread_beginner_questions/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ch7whw/wednesday_daily_thread_beginner_questions/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714521610,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "**What My Project Does**: Allows users to run a pytest test from a notebook or other REPL and capture local variables for inspection / debugging. While I think users should very often prefer debugging tests with a debugger, in certain situations where one deals with a nontrivial amount of data or many complex objects, being able to inspect and manipulate objects in a notebook can be helpful.\n\n**Target Audience**: Primarily data scientists, but more generally anyone who tests with large/complex objects that can be difficult to understand in a debugger.\n\n**Comparison:** I'm not aware of any alternatives, other than copy-and-pasting your pytest tests in a notebook.\n\n**Repo with examples:** [https://github.com/rhshadrach/pytest-ndb](https://github.com/rhshadrach/pytest-ndb)",
			"author_fullname": "t2_w20kg6ge",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "pytest-ndb - debugging pytest tests in a notebook",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1ch5e3g",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.78,
			"author_flair_background_color": "#edeff1",
			"subreddit_type": "public",
			"ups": 5,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": "9baede44-b7aa-11ed-8be3-96f3169d2b26",
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 5,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [
			  {
				"a": ":pandas_Logo:",
				"e": "emoji",
				"u": "https://emoji.redditmedia.com/jneg2sjktzka1_t5_2qh0y/pandas_Logo"
			  },
			  {
				"e": "text",
				"t": " pandas Core Dev "
			  }
			],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714514966,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "richtext",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;: Allows users to run a pytest test from a notebook or other REPL and capture local variables for inspection / debugging. While I think users should very often prefer debugging tests with a debugger, in certain situations where one deals with a nontrivial amount of data or many complex objects, being able to inspect and manipulate objects in a notebook can be helpful.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;: Primarily data scientists, but more generally anyone who tests with large/complex objects that can be difficult to understand in a debugger.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison:&lt;/strong&gt; I&amp;#39;m not aware of any alternatives, other than copy-and-pasting your pytest tests in a notebook.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Repo with examples:&lt;/strong&gt; &lt;a href=\"https://github.com/rhshadrach/pytest-ndb\"&gt;https://github.com/rhshadrach/pytest-ndb&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/JvNw1hdo4wmRpvbbFAzoSmEvib9fPIVoH1P0fEpQE5g.jpg?auto=webp&amp;s=d9dde80b01202220acb8ab4536a970e3e30bd48e",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/JvNw1hdo4wmRpvbbFAzoSmEvib9fPIVoH1P0fEpQE5g.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=093310d486369786e97975a583009cf8e43df917",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/JvNw1hdo4wmRpvbbFAzoSmEvib9fPIVoH1P0fEpQE5g.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=8416ee1431f02903da8d508666f1378759632f44",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/JvNw1hdo4wmRpvbbFAzoSmEvib9fPIVoH1P0fEpQE5g.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2bdf773ed98b7495b1a56f64c7541633a695f3ad",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/JvNw1hdo4wmRpvbbFAzoSmEvib9fPIVoH1P0fEpQE5g.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=159ef1a893521939f0f41b0be51e4e6f3efd688d",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/JvNw1hdo4wmRpvbbFAzoSmEvib9fPIVoH1P0fEpQE5g.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=776deb2e5f6899064d80c189c964693faaa76a18",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/JvNw1hdo4wmRpvbbFAzoSmEvib9fPIVoH1P0fEpQE5g.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f57813ee00329c2885def6680f096c4e3a1bf634",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "pACkqn-YAkikCIpfS_IBhhEPZmLzmKUE8dlnRYNmaCI"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": ":pandas_Logo: pandas Core Dev ",
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1ch5e3g",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "rhshadrach",
			"discussion_type": null,
			"num_comments": 2,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": "dark",
			"permalink": "/r/Python/comments/1ch5e3g/pytestndb_debugging_pytest_tests_in_a_notebook/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1ch5e3g/pytestndb_debugging_pytest_tests_in_a_notebook/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714514966,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html\n\n\nAre there any ramifications for the Python community outside of  Google?",
			"author_fullname": "t2_a6ftd",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Google laysoff Python maintainer team",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "News"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "news",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cg4st4",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.91,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 492,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "News",
			"can_mod_post": false,
			"score": 492,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714411366,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html\"&gt;https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Are there any ramifications for the Python community outside of  Google?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/pBQ-Ir8V8vf-6QxfZAFvc_NuVsqFQF9hfQqHjkVHlaM.jpg?auto=webp&amp;s=5527b6e035a575f364a2121c42d20740ae6f189b",
					"width": 1600,
					"height": 900
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/pBQ-Ir8V8vf-6QxfZAFvc_NuVsqFQF9hfQqHjkVHlaM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=958fcf851c0d105a8f97bf594c0508a90de57544",
					  "width": 108,
					  "height": 60
					},
					{
					  "url": "https://external-preview.redd.it/pBQ-Ir8V8vf-6QxfZAFvc_NuVsqFQF9hfQqHjkVHlaM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=601b75319be902094d3ab30632f02756a50d020c",
					  "width": 216,
					  "height": 121
					},
					{
					  "url": "https://external-preview.redd.it/pBQ-Ir8V8vf-6QxfZAFvc_NuVsqFQF9hfQqHjkVHlaM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=0f1b823fe36d2d210f449d951ac9d62b98caf45d",
					  "width": 320,
					  "height": 180
					},
					{
					  "url": "https://external-preview.redd.it/pBQ-Ir8V8vf-6QxfZAFvc_NuVsqFQF9hfQqHjkVHlaM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b2bb14c4ea2c9ff3b1711eb642a7f8783ef0b31c",
					  "width": 640,
					  "height": 360
					},
					{
					  "url": "https://external-preview.redd.it/pBQ-Ir8V8vf-6QxfZAFvc_NuVsqFQF9hfQqHjkVHlaM.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=4f576d419df82c2d06df2be27ce1c589be4c8327",
					  "width": 960,
					  "height": 540
					},
					{
					  "url": "https://external-preview.redd.it/pBQ-Ir8V8vf-6QxfZAFvc_NuVsqFQF9hfQqHjkVHlaM.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=3aca9a99b6131bdbb2f220b5109191604f2626b8",
					  "width": 1080,
					  "height": 607
					}
				  ],
				  "variants": {

				  },
				  "id": "mHvpCZiGnvM55RLSAH_z_iJPJlgQIUALVcaNIkSaTyg"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#7193ff",
			"id": "1cg4st4",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "jmreagle",
			"discussion_type": null,
			"num_comments": 136,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cg4st4/google_laysoff_python_maintainer_team/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cg4st4/google_laysoff_python_maintainer_team/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714411366,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "[https://github.com/dalleyg/pyrseus](https://github.com/dalleyg/pyrseus)\n\n**What My Project Does**\n\nPyrseus extends Python‚Äôs concurrent.futures asynchronous and concurrent programming package with:\n\n* a collection of non-concurrent executors for light workloads and troubleshooting,\n* ExecutorCtx, a factory for easily switching between different executors, and\n* a collection of ready-built ExecutorCtx plugins, supporting executors from concurrent.futures, ipyparallel, loky, mpi4py, and itself. Where relevant, optional cloudpickle-enhanced plugins are also provided.\n\nFull documentation is available at https://pyrseus.readthedocs.io/en/latest/.\n\n**Target Audience**\n\nPython developers who already use concurrent.futures that want at least one of the following:\n\n* an easier way to troubleshoot problems with their tasks without having to rewrite the control code,\n* an easier way to switch between concurrent and non-concurrent execution without having to rewrite the control code, and/or\n* an easier way to dynamically change what executor class is used at runtime.\n\n**Comparison**\n\n* InlineExecutor is similar to various open source classes that already exist, but almost always as internal implementation details in much larger projects.\n* NoCatchExecutor is a less common class in other libraries, since it intentionally has non-standard error handling. We include it because it can be useful in situations where one wants true fail-fast behavior.\n* We're not aware of the other pickle-testing serial executors existing elsewhere.\n* ExecutorCtx ties together the executors provided by Pyrseus. We're not aware of any open source libraries that support (a) both serial and concurrent executors, and (b) do so as a standalone package instead of as part of a much larger package.\n* It's worth giving special mention to the loky project. It provides (a) a better version of concurrent.futures.ProcessPoolExecutor and (b) a reusable executor factory. Pyrseus can use loky's executors as backends, if it's installed. Our package extends loky by making its reusable executors usable as context managers. We also supply non-concurrent executors and make it easy to switch to them at runtime, as discussed above.\n\nSee the notebooks and the plugins list at [https://pyrseus.readthedocs.io/en/latest/](https://pyrseus.readthedocs.io/en/latest/) for more details.",
			"author_fullname": "t2_zebhpoy8a",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "pyrseus - concurrent.futures extensions for easier troubleshooting",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cgx1qp",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.67,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 4,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 4,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714494368,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/dalleyg/pyrseus\"&gt;https://github.com/dalleyg/pyrseus&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Pyrseus extends Python‚Äôs concurrent.futures asynchronous and concurrent programming package with:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;a collection of non-concurrent executors for light workloads and troubleshooting,&lt;/li&gt;\n&lt;li&gt;ExecutorCtx, a factory for easily switching between different executors, and&lt;/li&gt;\n&lt;li&gt;a collection of ready-built ExecutorCtx plugins, supporting executors from concurrent.futures, ipyparallel, loky, mpi4py, and itself. Where relevant, optional cloudpickle-enhanced plugins are also provided.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Full documentation is available at &lt;a href=\"https://pyrseus.readthedocs.io/en/latest/\"&gt;https://pyrseus.readthedocs.io/en/latest/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Python developers who already use concurrent.futures that want at least one of the following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;an easier way to troubleshoot problems with their tasks without having to rewrite the control code,&lt;/li&gt;\n&lt;li&gt;an easier way to switch between concurrent and non-concurrent execution without having to rewrite the control code, and/or&lt;/li&gt;\n&lt;li&gt;an easier way to dynamically change what executor class is used at runtime.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;InlineExecutor is similar to various open source classes that already exist, but almost always as internal implementation details in much larger projects.&lt;/li&gt;\n&lt;li&gt;NoCatchExecutor is a less common class in other libraries, since it intentionally has non-standard error handling. We include it because it can be useful in situations where one wants true fail-fast behavior.&lt;/li&gt;\n&lt;li&gt;We&amp;#39;re not aware of the other pickle-testing serial executors existing elsewhere.&lt;/li&gt;\n&lt;li&gt;ExecutorCtx ties together the executors provided by Pyrseus. We&amp;#39;re not aware of any open source libraries that support (a) both serial and concurrent executors, and (b) do so as a standalone package instead of as part of a much larger package.&lt;/li&gt;\n&lt;li&gt;It&amp;#39;s worth giving special mention to the loky project. It provides (a) a better version of concurrent.futures.ProcessPoolExecutor and (b) a reusable executor factory. Pyrseus can use loky&amp;#39;s executors as backends, if it&amp;#39;s installed. Our package extends loky by making its reusable executors usable as context managers. We also supply non-concurrent executors and make it easy to switch to them at runtime, as discussed above.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;See the notebooks and the plugins list at &lt;a href=\"https://pyrseus.readthedocs.io/en/latest/\"&gt;https://pyrseus.readthedocs.io/en/latest/&lt;/a&gt; for more details.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/9X97nhvqlatEgUGIpi52fGSOKG_0898TuhdC82cJ09o.jpg?auto=webp&amp;s=560fae0cd1f1b929b5d2e524fd46a4a07f9b08b3",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/9X97nhvqlatEgUGIpi52fGSOKG_0898TuhdC82cJ09o.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=35092bdcba3cb43544c0a9154cb17442baa049cb",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/9X97nhvqlatEgUGIpi52fGSOKG_0898TuhdC82cJ09o.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=957e9ac69a885aea3cf751a75dcf3bf086822c2b",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/9X97nhvqlatEgUGIpi52fGSOKG_0898TuhdC82cJ09o.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=329fc0f6f8ca64c25e3f550fae01701122d88b86",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/9X97nhvqlatEgUGIpi52fGSOKG_0898TuhdC82cJ09o.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6b89d5801d5e83c085209d878bb3a3fdd5533e5a",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/9X97nhvqlatEgUGIpi52fGSOKG_0898TuhdC82cJ09o.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=940134080d95aa086dac4276a66297cbdceaac15",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/9X97nhvqlatEgUGIpi52fGSOKG_0898TuhdC82cJ09o.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=e9d93fdcac69814d8246bf4638ecaced8d874b50",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "GKvMl5XXuy1xxT2ZB6I7-SIT1dmwI59Q0AU8CK1Q1FE"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1cgx1qp",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "Mental-Elephant-6215",
			"discussion_type": null,
			"num_comments": 2,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cgx1qp/pyrseus_concurrentfutures_extensions_for_easier/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cgx1qp/pyrseus_concurrentfutures_extensions_for_easier/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714494368,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "are there any groups, meets, events etc i can get involved with locally in london uk?  \n\n\ni've got moderate python chops as well as a wide range of other skills and tools, notably construction and event organisation/production/management, but also 3d design and print, some electronics and others.  \n\n\ni work flexible hours and honestly am looking to develop a network and experiences to land my first job that at least involves some coding - i'm happy to commit significant time and resource to interesting projects to get eventually my foot or at least my nose in a door somewhere. (i dont mean i would stop contributing to the project once i land a job!)  \n\n\nthanks!",
			"author_fullname": "t2_2n7gqsqv",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "python irl in london england",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cgsxff",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.64,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 6,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 6,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714483899,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;are there any groups, meets, events etc i can get involved with locally in london uk?  &lt;/p&gt;\n\n&lt;p&gt;i&amp;#39;ve got moderate python chops as well as a wide range of other skills and tools, notably construction and event organisation/production/management, but also 3d design and print, some electronics and others.  &lt;/p&gt;\n\n&lt;p&gt;i work flexible hours and honestly am looking to develop a network and experiences to land my first job that at least involves some coding - i&amp;#39;m happy to commit significant time and resource to interesting projects to get eventually my foot or at least my nose in a door somewhere. (i dont mean i would stop contributing to the project once i land a job!)  &lt;/p&gt;\n\n&lt;p&gt;thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1cgsxff",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "ProsodySpeaks",
			"discussion_type": null,
			"num_comments": 3,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cgsxff/python_irl_in_london_england/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cgsxff/python_irl_in_london_england/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714483899,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Source Code: [https://github.com/dhilipsiva/py-compress-compare](https://github.com/dhilipsiva/py-compress-compare)\n\n# Analyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard\n\nWhen dealing with large volumes of data, compression can be a critical factor in enhancing performance, reducing storage costs, and speeding up network transfers. In this blog post, we will dive into a comparison of four popular Python compression libraries‚Äîzlib, LZ4, Brotli, and Zstandard‚Äîusing a real-world dataset to evaluate their performance in terms of compression ratio and time efficiency.\n\n## The Experiment Setup\n\nOur test involved a dataset roughly 581 KB in size, named sample_data.json. We executed compression and decompression using each library as follows:\n\n* Compression was performed 1000 times.\n* Decompression was repeated 10,000 times.\n\nThis rigorous testing framework ensures that we obtain a solid understanding of each library's performance under heavy load.\n\n## Compression Ratio\n\nThe compression ratio is a key metric that represents how effectively a compression algorithm can reduce the size of the input data. Here‚Äôs how each library scored:\n\n* Zlib achieved a compression ratio of 27.84,\n* LZ4 came in at 18.23,\n* Brotli impressed with a ratio of 64.78,\n* Zstandard offered a ratio of 43.42.\n\nFrom these results, Brotli leads with the highest compression ratio, indicating its superior efficiency in data size reduction. Zstandard also shows strong performance, while LZ4, though lower, still provides a reasonable reduction.\n\n## Compression Time\n\nEfficiency isn't just about space savings; time is equally crucial. Here‚Äôs how long each library took to compress the data:\n\n* Zlib: 7.34 seconds,\n* LZ4: 0.13 seconds,\n* Brotli: 204.18 seconds,\n* Zstandard: 0.15 seconds.\n\nLZ4 and Zstandard excel in speed, with LZ4 being slightly faster. Zlib offers a middle ground, but Brotli, despite its high compression efficiency, takes significantly longer, which could be a drawback for real-time applications.\n\n## Decompression Time\n\nDecompression time is vital for applications where data needs to be rapidly restored to its original state:\n\n* Zlib: 11.99 seconds,\n* LZ4: 0.46 seconds,\n* Brotli: 0.99 seconds,\n* Zstandard: 0.46 seconds.\n\nAgain, LZ4 and Zstandard show excellent performance, both under half a second. Brotli presents a decent time despite its lengthy compression time, while zlib lags behind in this aspect.\n\n## Conclusion\n\nEach library has its strengths and weaknesses:\n\n* Brotli is your go-to for maximum compression but at the cost of time, making it suitable for applications where compression time is less critical.\n* Zstandard offers a great balance between compression ratio and speed, recommended for a wide range of applications.\n* LZ4 shines in speed, ideal for scenarios requiring rapid data processing.\n* Zlib provides moderate performance across the board.\n\nChoosing the right library depends on your specific needs, whether it‚Äôs speed, space, or a balance of both. This experiment provides a clear picture of what to expect from these libraries, helping you make an informed decision based on your application's requirements.\n",
			"author_fullname": "t2_as0qk9fw",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Analyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cgk4xi",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.78,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 21,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 21,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714451544,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Source Code: &lt;a href=\"https://github.com/dhilipsiva/py-compress-compare\"&gt;https://github.com/dhilipsiva/py-compress-compare&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Analyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard&lt;/h1&gt;\n\n&lt;p&gt;When dealing with large volumes of data, compression can be a critical factor in enhancing performance, reducing storage costs, and speeding up network transfers. In this blog post, we will dive into a comparison of four popular Python compression libraries‚Äîzlib, LZ4, Brotli, and Zstandard‚Äîusing a real-world dataset to evaluate their performance in terms of compression ratio and time efficiency.&lt;/p&gt;\n\n&lt;h2&gt;The Experiment Setup&lt;/h2&gt;\n\n&lt;p&gt;Our test involved a dataset roughly 581 KB in size, named sample_data.json. We executed compression and decompression using each library as follows:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Compression was performed 1000 times.&lt;/li&gt;\n&lt;li&gt;Decompression was repeated 10,000 times.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This rigorous testing framework ensures that we obtain a solid understanding of each library&amp;#39;s performance under heavy load.&lt;/p&gt;\n\n&lt;h2&gt;Compression Ratio&lt;/h2&gt;\n\n&lt;p&gt;The compression ratio is a key metric that represents how effectively a compression algorithm can reduce the size of the input data. Here‚Äôs how each library scored:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Zlib achieved a compression ratio of 27.84,&lt;/li&gt;\n&lt;li&gt;LZ4 came in at 18.23,&lt;/li&gt;\n&lt;li&gt;Brotli impressed with a ratio of 64.78,&lt;/li&gt;\n&lt;li&gt;Zstandard offered a ratio of 43.42.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;From these results, Brotli leads with the highest compression ratio, indicating its superior efficiency in data size reduction. Zstandard also shows strong performance, while LZ4, though lower, still provides a reasonable reduction.&lt;/p&gt;\n\n&lt;h2&gt;Compression Time&lt;/h2&gt;\n\n&lt;p&gt;Efficiency isn&amp;#39;t just about space savings; time is equally crucial. Here‚Äôs how long each library took to compress the data:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Zlib: 7.34 seconds,&lt;/li&gt;\n&lt;li&gt;LZ4: 0.13 seconds,&lt;/li&gt;\n&lt;li&gt;Brotli: 204.18 seconds,&lt;/li&gt;\n&lt;li&gt;Zstandard: 0.15 seconds.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;LZ4 and Zstandard excel in speed, with LZ4 being slightly faster. Zlib offers a middle ground, but Brotli, despite its high compression efficiency, takes significantly longer, which could be a drawback for real-time applications.&lt;/p&gt;\n\n&lt;h2&gt;Decompression Time&lt;/h2&gt;\n\n&lt;p&gt;Decompression time is vital for applications where data needs to be rapidly restored to its original state:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Zlib: 11.99 seconds,&lt;/li&gt;\n&lt;li&gt;LZ4: 0.46 seconds,&lt;/li&gt;\n&lt;li&gt;Brotli: 0.99 seconds,&lt;/li&gt;\n&lt;li&gt;Zstandard: 0.46 seconds.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Again, LZ4 and Zstandard show excellent performance, both under half a second. Brotli presents a decent time despite its lengthy compression time, while zlib lags behind in this aspect.&lt;/p&gt;\n\n&lt;h2&gt;Conclusion&lt;/h2&gt;\n\n&lt;p&gt;Each library has its strengths and weaknesses:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Brotli is your go-to for maximum compression but at the cost of time, making it suitable for applications where compression time is less critical.&lt;/li&gt;\n&lt;li&gt;Zstandard offers a great balance between compression ratio and speed, recommended for a wide range of applications.&lt;/li&gt;\n&lt;li&gt;LZ4 shines in speed, ideal for scenarios requiring rapid data processing.&lt;/li&gt;\n&lt;li&gt;Zlib provides moderate performance across the board.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Choosing the right library depends on your specific needs, whether it‚Äôs speed, space, or a balance of both. This experiment provides a clear picture of what to expect from these libraries, helping you make an informed decision based on your application&amp;#39;s requirements.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/m_-1FBiRohHU23Xzr81jAfu6FP8a-g1XawiOh8mDo6E.jpg?auto=webp&amp;s=bcc8c49df9383ad1c41f226ff8d5469bee6e6815",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/m_-1FBiRohHU23Xzr81jAfu6FP8a-g1XawiOh8mDo6E.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=34fa4d4121ffaec0e59d9f6a9faa6d32598349e3",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/m_-1FBiRohHU23Xzr81jAfu6FP8a-g1XawiOh8mDo6E.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b3f25f0c2cbfeb3ac90aa9f7d81eb63495f2d545",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/m_-1FBiRohHU23Xzr81jAfu6FP8a-g1XawiOh8mDo6E.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b9ed3a7c7a50f5cf64aaae2e5ea7799c3e93c267",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/m_-1FBiRohHU23Xzr81jAfu6FP8a-g1XawiOh8mDo6E.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b7762ab9b2456b492d0ff71dcbfa5af63eb0c861",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/m_-1FBiRohHU23Xzr81jAfu6FP8a-g1XawiOh8mDo6E.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=203f901ef6bccb98a01b0d0a96e721bc6efb805c",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/m_-1FBiRohHU23Xzr81jAfu6FP8a-g1XawiOh8mDo6E.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=c3bf75f8e6e33887dad52815ade1f5b36fa70947",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "BGmjhOsJAD8cU1KalvAlOZ5WmVMeU7J8DIUGFlyIBnY"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1cgk4xi",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "dhilip-siva",
			"discussion_type": null,
			"num_comments": 15,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cgk4xi/analyzing_python_compression_libraries_zlib_lz4/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cgk4xi/analyzing_python_compression_libraries_zlib_lz4/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714451544,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hi!\n\nI've just sorted through some of my books on Leanpub and decided to make the book on Python Regular Expressions free to download for a couple of days. \n\nWhy? Just for fun and learning and to get some valuable feedback.\n\n&amp;#x200B;\n\n* Free ebook link: [https://leanpub.com/regexpython/](https://leanpub.com/regexpython/)\n* Regex Video Tutorials: [https://blog.finxter.com/python-regex/](https://blog.finxter.com/python-regex/)\n\n&amp;#x200B;\n\nThis book helps you learn regular expressions chapter by chapter. Each chapter first teaches the concepts and then asks you to solve Python puzzles (\"Guess the code!\") to master the concepts. The main idea is to keep it lightweight and fun.\n\n&amp;#x200B;\n\n**Here's the ToC:**\n\n1. Introduction\n2. Applications\n3. About\n4. Puzzle Learning\n5. Basics\n6. Special Symbols\n7. Character Sets\n8. Dot Regex\n9. Asterisk Quantifier\n10. Plus Quantifier\n11. ? Quantifier\n12. Quantifier Differentiation\n13. Greediness\n14. Line and String Boundaries\n15. OR Regex\n16. AND Regex\n17. NOT Regex\n18. Matching Groups\n19. Split Method\n20. Substitution Method\n21. Compile Method\n22. Bonus Puzzles\n23. Final Remarks\n\n&amp;#x200B;\n\nI hope you enjoy learning from the book! Feel free to send me your feedback.\n\nHappy learning \"R\\[e-x\\]+\"! ü§ì",
			"author_fullname": "t2_1on68pot",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "I wrote a book on Python Regular Expressions - and made it free!",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Resource"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "resource",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cg054p",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.89,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 74,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Resource",
			"can_mod_post": false,
			"score": 74,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714400006,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve just sorted through some of my books on Leanpub and decided to make the book on Python Regular Expressions free to download for a couple of days. &lt;/p&gt;\n\n&lt;p&gt;Why? Just for fun and learning and to get some valuable feedback.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Free ebook link: &lt;a href=\"https://leanpub.com/regexpython/\"&gt;https://leanpub.com/regexpython/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Regex Video Tutorials: &lt;a href=\"https://blog.finxter.com/python-regex/\"&gt;https://blog.finxter.com/python-regex/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;This book helps you learn regular expressions chapter by chapter. Each chapter first teaches the concepts and then asks you to solve Python puzzles (&amp;quot;Guess the code!&amp;quot;) to master the concepts. The main idea is to keep it lightweight and fun.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Here&amp;#39;s the ToC:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Introduction&lt;/li&gt;\n&lt;li&gt;Applications&lt;/li&gt;\n&lt;li&gt;About&lt;/li&gt;\n&lt;li&gt;Puzzle Learning&lt;/li&gt;\n&lt;li&gt;Basics&lt;/li&gt;\n&lt;li&gt;Special Symbols&lt;/li&gt;\n&lt;li&gt;Character Sets&lt;/li&gt;\n&lt;li&gt;Dot Regex&lt;/li&gt;\n&lt;li&gt;Asterisk Quantifier&lt;/li&gt;\n&lt;li&gt;Plus Quantifier&lt;/li&gt;\n&lt;li&gt;? Quantifier&lt;/li&gt;\n&lt;li&gt;Quantifier Differentiation&lt;/li&gt;\n&lt;li&gt;Greediness&lt;/li&gt;\n&lt;li&gt;Line and String Boundaries&lt;/li&gt;\n&lt;li&gt;OR Regex&lt;/li&gt;\n&lt;li&gt;AND Regex&lt;/li&gt;\n&lt;li&gt;NOT Regex&lt;/li&gt;\n&lt;li&gt;Matching Groups&lt;/li&gt;\n&lt;li&gt;Split Method&lt;/li&gt;\n&lt;li&gt;Substitution Method&lt;/li&gt;\n&lt;li&gt;Compile Method&lt;/li&gt;\n&lt;li&gt;Bonus Puzzles&lt;/li&gt;\n&lt;li&gt;Final Remarks&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I hope you enjoy learning from the book! Feel free to send me your feedback.&lt;/p&gt;\n\n&lt;p&gt;Happy learning &amp;quot;R[e-x]+&amp;quot;! ü§ì&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/Ko4BBsvxrXlHJdCgd4WPL7OJszgm_SGt4RNFqFmoY_M.jpg?auto=webp&amp;s=9a00ddf8095661663696a472e82cc34e20a8fade",
					"width": 200,
					"height": 276
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/Ko4BBsvxrXlHJdCgd4WPL7OJszgm_SGt4RNFqFmoY_M.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=b45f6dd9a7e3332085b1399dbd1b4e43d27e8a01",
					  "width": 108,
					  "height": 149
					}
				  ],
				  "variants": {

				  },
				  "id": "BOCqIaWOsO5kkVqEYpyz7hQ-3gtu97m-T3pL3WU6nIk"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ddbd37",
			"id": "1cg054p",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "code_x_7777",
			"discussion_type": null,
			"num_comments": 25,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cg054p/i_wrote_a_book_on_python_regular_expressions_and/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cg054p/i_wrote_a_book_on_python_regular_expressions_and/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714400006,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "The primary vector for malicious code running in software developer environments (e.g., local system, CI/CD runners, production servers, etc.) is software dependencies. This is third-party code which often means open-source software, also known as running code from strangers on the internet.\n\nThe prized goal for attackers is arbitrary code execution. It‚Äôs the stuff high CVE scores are made of and often the topic of how vulnerabilities can turn into exploits. It‚Äôs the foothold needed to run cryptominers, steal secrets, or encrypt data for ransom. It‚Äôs no wonder why threat actors want it, but how do they get it? Sutton‚Äôs Law makes it obvious why they go after open-source software: because executing arbitrary code is easy there.\n\nThis is a series examining the methods malicious Python code gains execution. Some of the methods are obvious and some are potentially undiscovered or at least not found in the wild, yet. What they all mostly have in common is the reliance on a software dependency in the form of a Python package, which is where we begin.\n\nhttps://blog.phylum.io/how-malicious-python-code-gains-execution/",
			"author_fullname": "t2_3nj81",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "How Malicious Python Code Gains Execution",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Tutorial"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "tutorial",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cgw1y2",
			"quarantine": false,
			"link_flair_text_color": "dark",
			"upvote_ratio": 0.36,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 0,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Tutorial",
			"can_mod_post": false,
			"score": 0,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714491902,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The primary vector for malicious code running in software developer environments (e.g., local system, CI/CD runners, production servers, etc.) is software dependencies. This is third-party code which often means open-source software, also known as running code from strangers on the internet.&lt;/p&gt;\n\n&lt;p&gt;The prized goal for attackers is arbitrary code execution. It‚Äôs the stuff high CVE scores are made of and often the topic of how vulnerabilities can turn into exploits. It‚Äôs the foothold needed to run cryptominers, steal secrets, or encrypt data for ransom. It‚Äôs no wonder why threat actors want it, but how do they get it? Sutton‚Äôs Law makes it obvious why they go after open-source software: because executing arbitrary code is easy there.&lt;/p&gt;\n\n&lt;p&gt;This is a series examining the methods malicious Python code gains execution. Some of the methods are obvious and some are potentially undiscovered or at least not found in the wild, yet. What they all mostly have in common is the reliance on a software dependency in the form of a Python package, which is where we begin.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://blog.phylum.io/how-malicious-python-code-gains-execution/\"&gt;https://blog.phylum.io/how-malicious-python-code-gains-execution/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/saqnBBIaF80HD0mPdS4ofgSyvJTA_ql8JuZEfDkIoRU.jpg?auto=webp&amp;s=b3554ca0cb9701bee04ed79232ee9bd221340711",
					"width": 1200,
					"height": 576
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/saqnBBIaF80HD0mPdS4ofgSyvJTA_ql8JuZEfDkIoRU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bcaeb8c5de520bf3df5ff862c830e442675f38e9",
					  "width": 108,
					  "height": 51
					},
					{
					  "url": "https://external-preview.redd.it/saqnBBIaF80HD0mPdS4ofgSyvJTA_ql8JuZEfDkIoRU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f6d8ce1b375f1d8ce5bc024aab51bfc1ea8ab282",
					  "width": 216,
					  "height": 103
					},
					{
					  "url": "https://external-preview.redd.it/saqnBBIaF80HD0mPdS4ofgSyvJTA_ql8JuZEfDkIoRU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7639520457358c3531269977b61bea07b4f43a86",
					  "width": 320,
					  "height": 153
					},
					{
					  "url": "https://external-preview.redd.it/saqnBBIaF80HD0mPdS4ofgSyvJTA_ql8JuZEfDkIoRU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=8147b20f7f0ff082052f331d1b8264993a911d1f",
					  "width": 640,
					  "height": 307
					},
					{
					  "url": "https://external-preview.redd.it/saqnBBIaF80HD0mPdS4ofgSyvJTA_ql8JuZEfDkIoRU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=0d47c3e52c3b0c50781bd023f5ee542c46f485c8",
					  "width": 960,
					  "height": 460
					},
					{
					  "url": "https://external-preview.redd.it/saqnBBIaF80HD0mPdS4ofgSyvJTA_ql8JuZEfDkIoRU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=65ac2b190acf01f9c22ed70f1a7487f5f96d23f2",
					  "width": 1080,
					  "height": 518
					}
				  ],
				  "variants": {

				  },
				  "id": "fkvmai0glIOAaOkinsLhJWe-E4n72Jo7dtHR6cClKJA"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#dadada",
			"id": "1cgw1y2",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "louis11",
			"discussion_type": null,
			"num_comments": 10,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cgw1y2/how_malicious_python_code_gains_execution/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cgw1y2/how_malicious_python_code_gains_execution/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714491902,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "# Weekly Wednesday Thread: Advanced Questions üêç\n\nDive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.\n\n## How it Works:\n\n1. **Ask Away**: Post your advanced Python questions here.\n2. **Expert Insights**: Get answers from experienced developers.\n3. **Resource Pool**: Share or discover tutorials, articles, and tips.\n\n## Guidelines:\n\n* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.\n* Questions that are not advanced may be removed and redirected to the appropriate thread.\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **How can you implement a custom memory allocator in Python?**\n2. **What are the best practices for optimizing Cython code for heavy numerical computations?**\n3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**\n4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**\n5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**\n6. **What are some advanced use-cases for Python's decorators?**\n7. **How can you achieve real-time data streaming in Python with WebSockets?**\n8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**\n9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**\n10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**\n\nLet's deepen our Python knowledge together. Happy coding! üåü",
			"author_fullname": "t2_6l4z3",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Tuesday Daily Thread: Advanced questions",
			"link_flair_richtext": [
			  {
				"a": ":pythonLogo:",
				"e": "emoji",
				"u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
			  },
			  {
				"e": "text",
				"t": " Daily Thread"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "daily-thread",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cgem9q",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 1,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 2,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": ":pythonLogo: Daily Thread",
			"can_mod_post": false,
			"score": 2,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": true,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714435208,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Wednesday Thread: Advanced Questions üêç&lt;/h1&gt;\n\n&lt;p&gt;Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Away&lt;/strong&gt;: Post your advanced Python questions here.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Expert Insights&lt;/strong&gt;: Get answers from experienced developers.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Pool&lt;/strong&gt;: Share or discover tutorials, articles, and tips.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is for &lt;strong&gt;advanced questions only&lt;/strong&gt;. Beginner questions are welcome in our &lt;a href=\"#daily-beginner-thread-link\"&gt;Daily Beginner Thread&lt;/a&gt; every Thursday.&lt;/li&gt;\n&lt;li&gt;Questions that are not advanced may be removed and redirected to the appropriate thread.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;How can you implement a custom memory allocator in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for optimizing Cython code for heavy numerical computations?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do you set up a multi-threaded architecture using Python&amp;#39;s Global Interpreter Lock (GIL)?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How would you go about implementing a distributed task queue using Celery and RabbitMQ?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are some advanced use-cases for Python&amp;#39;s decorators?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How can you achieve real-time data streaming in Python with WebSockets?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Best practices for securing a Flask (or similar) REST API with OAuth 2.0?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s deepen our Python knowledge together. Happy coding! üåü&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76",
					"width": 512,
					"height": 288
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413",
					  "width": 108,
					  "height": 60
					},
					{
					  "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf",
					  "width": 216,
					  "height": 121
					},
					{
					  "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16",
					  "width": 320,
					  "height": 180
					}
				  ],
				  "variants": {

				  },
				  "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": "moderator",
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#00a6a5",
			"id": "1cgem9q",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "AutoModerator",
			"discussion_type": null,
			"num_comments": 2,
			"send_replies": false,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cgem9q/tuesday_daily_thread_advanced_questions/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cgem9q/tuesday_daily_thread_advanced_questions/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714435208,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "Hi folks!\n\nI am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images. \n\nLooking online I found some labs where they work with images, but I thought I'd ask (not sure if it's the right sub tho) cause I'm sure this way I'll hear about many places that deal with Medical Imaging.\n\nThanks :)\n\n",
			"author_fullname": "t2_1d0y5m72",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "Medical imaging Python jobs",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Discussion"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "discussion",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cfx0qe",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.68,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 10,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Discussion",
			"can_mod_post": false,
			"score": 10,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714391048,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi folks!&lt;/p&gt;\n\n&lt;p&gt;I am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images. &lt;/p&gt;\n\n&lt;p&gt;Looking online I found some labs where they work with images, but I thought I&amp;#39;d ask (not sure if it&amp;#39;s the right sub tho) cause I&amp;#39;m sure this way I&amp;#39;ll hear about many places that deal with Medical Imaging.&lt;/p&gt;\n\n&lt;p&gt;Thanks :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#f50057",
			"id": "1cfx0qe",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "Durysik",
			"discussion_type": null,
			"num_comments": 15,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cfx0qe/medical_imaging_python_jobs/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cfx0qe/medical_imaging_python_jobs/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714391048,
			"num_crossposts": 0,
			"media": null,
			"is_video": false
		  }
		},
		{
		  "kind": "t3",
		  "data": {
			"approved_at_utc": null,
			"subreddit": "Python",
			"selftext": "**Source code**: [https://github.com/ben-n93/tab-pal](https://github.com/ben-n93/tab-pal)  \n**What my Project Does**  \nMakes it quicker, easier and prettier to create custom colour palettes in Tableau. \n\nRather than having to find your Preferences.tps file every time and edit the XML you can just launch `tab-pal` from the command-line and make any changes you want (adding/deleting new palettes, adding/removing colours.\n\nYou also get a preview of the colours you've added.\n\n  \n**Target Audience**  \nData/business analysts and data scientists and who work with Tableau.  \n**Comparison**  \nThere are some websites that let you dynamically create the Preferences.tps XML file however this still requires you to locate the file and copy and paste  over it with any changes you make",
			"author_fullname": "t2_qlsr9p64h",
			"saved": false,
			"mod_reason_title": null,
			"gilded": 0,
			"clicked": false,
			"title": "tab-pal: a TUI for adding and editing custom colour palettes in Tableau",
			"link_flair_richtext": [
			  {
				"e": "text",
				"t": "Showcase"
			  }
			],
			"subreddit_name_prefixed": "r/Python",
			"hidden": false,
			"pwls": 6,
			"link_flair_css_class": "showcase",
			"downs": 0,
			"thumbnail_height": null,
			"top_awarded_type": null,
			"hide_score": false,
			"name": "t3_1cftm37",
			"quarantine": false,
			"link_flair_text_color": "light",
			"upvote_ratio": 0.82,
			"author_flair_background_color": null,
			"subreddit_type": "public",
			"ups": 13,
			"total_awards_received": 0,
			"media_embed": {

			},
			"thumbnail_width": null,
			"author_flair_template_id": null,
			"is_original_content": false,
			"user_reports": [],
			"secure_media": null,
			"is_reddit_media_domain": false,
			"is_meta": false,
			"category": null,
			"secure_media_embed": {

			},
			"link_flair_text": "Showcase",
			"can_mod_post": false,
			"score": 13,
			"approved_by": null,
			"is_created_from_ads_ui": false,
			"author_premium": false,
			"thumbnail": "self",
			"edited": false,
			"author_flair_css_class": null,
			"author_flair_richtext": [],
			"gildings": {

			},
			"post_hint": "self",
			"content_categories": null,
			"is_self": true,
			"mod_note": null,
			"created": 1714377826,
			"link_flair_type": "richtext",
			"wls": 6,
			"removed_by_category": null,
			"banned_by": null,
			"author_flair_type": "text",
			"domain": "self.Python",
			"allow_live_comments": false,
			"selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Source code&lt;/strong&gt;: &lt;a href=\"https://github.com/ben-n93/tab-pal\"&gt;https://github.com/ben-n93/tab-pal&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;What my Project Does&lt;/strong&gt;&lt;br/&gt;\nMakes it quicker, easier and prettier to create custom colour palettes in Tableau. &lt;/p&gt;\n\n&lt;p&gt;Rather than having to find your Preferences.tps file every time and edit the XML you can just launch &lt;code&gt;tab-pal&lt;/code&gt; from the command-line and make any changes you want (adding/deleting new palettes, adding/removing colours.&lt;/p&gt;\n\n&lt;p&gt;You also get a preview of the colours you&amp;#39;ve added.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;br/&gt;\nData/business analysts and data scientists and who work with Tableau.&lt;br/&gt;\n&lt;strong&gt;Comparison&lt;/strong&gt;&lt;br/&gt;\nThere are some websites that let you dynamically create the Preferences.tps XML file however this still requires you to locate the file and copy and paste  over it with any changes you make&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
			"likes": null,
			"suggested_sort": null,
			"banned_at_utc": null,
			"view_count": null,
			"archived": false,
			"no_follow": false,
			"is_crosspostable": false,
			"pinned": false,
			"over_18": false,
			"preview": {
			  "images": [
				{
				  "source": {
					"url": "https://external-preview.redd.it/gE6dU9DcmauUoYHtlFrUExl95WF1k5Xa36q2IgU2__I.jpg?auto=webp&amp;s=ae58032f5acd3a410f4ee8ddc7bf46b2e02505a0",
					"width": 1200,
					"height": 600
				  },
				  "resolutions": [
					{
					  "url": "https://external-preview.redd.it/gE6dU9DcmauUoYHtlFrUExl95WF1k5Xa36q2IgU2__I.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a073172c6c5b0a43c22c98cc93339cf8d070c1e6",
					  "width": 108,
					  "height": 54
					},
					{
					  "url": "https://external-preview.redd.it/gE6dU9DcmauUoYHtlFrUExl95WF1k5Xa36q2IgU2__I.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=effb80a8afe15cbd6d091ddf819e57633331a5ce",
					  "width": 216,
					  "height": 108
					},
					{
					  "url": "https://external-preview.redd.it/gE6dU9DcmauUoYHtlFrUExl95WF1k5Xa36q2IgU2__I.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86345da7e725bcb9cd3adc6b1cd36cb76397e484",
					  "width": 320,
					  "height": 160
					},
					{
					  "url": "https://external-preview.redd.it/gE6dU9DcmauUoYHtlFrUExl95WF1k5Xa36q2IgU2__I.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=0ab38c2c421af3b01540426db4c7327f90c78ccf",
					  "width": 640,
					  "height": 320
					},
					{
					  "url": "https://external-preview.redd.it/gE6dU9DcmauUoYHtlFrUExl95WF1k5Xa36q2IgU2__I.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=812d96e5e0995034f92b22739d75ea8ccb288e5a",
					  "width": 960,
					  "height": 480
					},
					{
					  "url": "https://external-preview.redd.it/gE6dU9DcmauUoYHtlFrUExl95WF1k5Xa36q2IgU2__I.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=236d361dc75fa15c218788ee488a762b4e0acf4b",
					  "width": 1080,
					  "height": 540
					}
				  ],
				  "variants": {

				  },
				  "id": "Tyidi9gI66wNPQOePco50d3lJWZjcnUbDHkn_UasC6U"
				}
			  ],
			  "enabled": false
			},
			"all_awardings": [],
			"awarders": [],
			"media_only": false,
			"link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
			"can_gild": false,
			"spoiler": false,
			"locked": false,
			"author_flair_text": null,
			"treatment_tags": [],
			"visited": false,
			"removed_by": null,
			"num_reports": null,
			"distinguished": null,
			"subreddit_id": "t5_2qh0y",
			"author_is_blocked": false,
			"mod_reason_by": null,
			"removal_reason": null,
			"link_flair_background_color": "#ff66ac",
			"id": "1cftm37",
			"is_robot_indexable": true,
			"report_reasons": null,
			"author": "Ok-Frosting7364",
			"discussion_type": null,
			"num_comments": 0,
			"send_replies": true,
			"whitelist_status": "all_ads",
			"contest_mode": false,
			"mod_reports": [],
			"author_patreon_flair": false,
			"author_flair_text_color": null,
			"permalink": "/r/Python/comments/1cftm37/tabpal_a_tui_for_adding_and_editing_custom_colour/",
			"parent_whitelist_status": "all_ads",
			"stickied": false,
			"url": "https://www.reddit.com/r/Python/comments/1cftm37/tabpal_a_tui_for_adding_and_editing_custom_colour/",
			"subreddit_subscribers": 1231878,
			"created_utc": 1714377826,
			"num_crossposts": 1,
			"media": null,
			"is_video": false
		  }
		}
	  ],
	  "before": null
	}
  }
